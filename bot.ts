// bot.ts ‚Äî —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä 15√ó3, –Ω–µ–∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ TON/USDT (jetton –Ω–∞ TON)
// –¢—Ä–µ–±—É–µ—Ç ton.ts (initTon/isTonConfigured/getReceiveAddress/getAssetKind/checkTonPayment/checkJettonPayment/sendTon/sendJetton)

import * as dotenv from 'dotenv';
dotenv.config();

import { Telegraf, Context, Markup } from 'telegraf';
import * as fs from 'fs/promises';
import * as path from 'path';
import { createHash } from 'crypto';

import {
  initTon,
  isTonConfigured,
  getReceiveAddress,
  getAssetKind,
  checkTonPayment,
  checkJettonPayment,
  sendTon,
  sendJetton,
} from './ton';

// ------------------ –ö–æ–Ω—Ñ–∏–≥ (.env) ------------------
const BOT_TOKEN = process.env.BOT_TOKEN || '';
if (!BOT_TOKEN) {
  console.error('ERROR: BOT_TOKEN is empty. Put it into .env');
  process.exit(1);
}
const ADMIN_IDS: number[] = (process.env.ADMIN_IDS || '')
  .split(',')
  .map(s => Number(s.trim()))
  .filter(Boolean);

const EVENTS_COUNT = Number(process.env.EVENTS_COUNT || 15);

// –í–∞–ª—é—Ç–∞ –±–∞–Ω–∫–∞ –∏ —Å—Ç–∞–≤–æ–∫: 'TON' –∏–ª–∏ 'USDT_TON'
const CURRENCY = (process.env.CURRENCY || 'TON').toUpperCase(); // 'TON' | 'USDT_TON'
const BASE_STAKE = Number(process.env.BASE_STAKE || 0.5); // —Å—Ç–∞–≤–∫–∞ –∑–∞ –æ–¥–Ω—É –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤ –≤–∞–ª—é—Ç–µ CURRENCY

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤
const PRIZE_POOL_PCT = Math.min(Math.max(Number(process.env.PRIZE_POOL_PCT || 0.9), 0), 1); // –¥–æ–ª—è –±–∞–Ω–∫–∞, –∏–¥—É—â–∞—è –≤ –ø—Ä–∏–∑—ã (0..1)
const TIER1_HITS = Number(process.env.TIER1_HITS || 15);
const TIER2_HITS = Number(process.env.TIER2_HITS || 14);
const TIER3_HITS = Number(process.env.TIER3_HITS || 13);
const TIER1_SHARE = Math.min(Math.max(Number(process.env.TIER1_SHARE || 0.6), 0), 1);
const TIER2_SHARE = Math.min(Math.max(Number(process.env.TIER2_SHARE || 0.25), 0), 1);
const TIER3_SHARE = Math.min(Math.max(Number(process.env.TIER3_SHARE || 0.15), 0), 1);

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—É–º–º—ã –¥–æ–ª–µ–π –∞–¥–µ–∫–≤–∞—Ç–Ω—ã
const sumShares = TIER1_SHARE + TIER2_SHARE + TIER3_SHARE;
if (sumShares > 1 + 1e-9) {
  console.warn('WARNING: TIER shares sum > 1. Extra will be ignored.');
}

// ------------------ –¢–∏–ø—ã ------------------
type DrawStatus = 'setup' | 'open' | 'closed' | 'settled';

interface Draw {
  id: number;
  status: DrawStatus;
  createdAt: string;
  events: EventItem[];
}

const OUTCOMES = ['1', 'X', '2'];

interface EventItem {
  idx: number;
  title: string;
  result: number | null;
  isVoid: boolean;
}

interface Ticket {
  id: string;
  userId: number;
  username?: string;
  selections: number[][];
  combos: number;
  amount: number;         // —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ (–≤ –≤–∞–ª—é—Ç–µ CURRENCY)
  paidAmount: number;     // –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –±—É–¥—É—â–µ–µ
  createdAt: string;
  paid: boolean;
  hitCount?: number;
  paymentComment?: string; // "TICKET:<id>" ‚Äî –¥–ª—è TON-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –¥–ª—è USDT forward-payload (–µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç)
}

interface UserData {
  hasTicketForCurrent: boolean;
  payoutAddress?: string; // TON –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–ª–∞—Ç (–∏ TON, –∏ USDT-jetton)
}

interface Store {
  draw: Draw;
  tickets: Ticket[];
  nextTicketSeq: number;
  users: { [userId: string]: UserData };
}

interface Session {
  selections: number[][];
}

// ------------------ –§–° ------------------
const DATA_DIR = path.join(process.cwd(), 'data');
const HISTORY_DIR = path.join(process.cwd(), 'history');
const STORE_FILE = path.join(DATA_DIR, 'store.json');

async function ensureDirs() {
  await fs.mkdir(DATA_DIR, { recursive: true });
  await fs.mkdir(HISTORY_DIR, { recursive: true });
}

async function loadStore(): Promise<Store> {
  await ensureDirs();
  try {
    const raw = await fs.readFile(STORE_FILE, 'utf8');
    const data = JSON.parse(raw);

    if (!Array.isArray(data.tickets)) data.tickets = [];
    for (const t of data.tickets) {
      // –º—è–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: —É–¥–∞–ª—è–µ–º —Å–ª–µ–¥—ã –∏–Ω–≤–æ–π—Å–æ–≤ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å)
      delete (t as any).invoiceUrl;
      delete (t as any).invoiceId;
      if (!('paymentComment' in t) && t.id) t.paymentComment = `TICKET:${t.id}`;
      if (!('paid' in t)) t.paid = false;
    }
    if (!data.users || typeof data.users !== 'object' || Array.isArray(data.users)) {
      data.users = {};
    }
    if (!data.draw) {
      data.draw = {
        id: 1,
        status: 'setup',
        createdAt: new Date().toISOString(),
        events: [],
      };
    }
    if (typeof data.nextTicketSeq !== 'number') {
      data.nextTicketSeq = 1;
    }
    return data as Store;
  } catch {
    const initial: Store = {
      draw: { id: 1, status: 'setup', createdAt: new Date().toISOString(), events: [] },
      tickets: [],
      nextTicketSeq: 1,
      users: {},
    };
    await fs.writeFile(STORE_FILE, JSON.stringify(initial, null, 2));
    return initial;
  }
}

async function saveStore(data: Store) {
  if (!data.users || typeof data.users !== 'object' || Array.isArray(data.users)) {
    data.users = {};
  }
  await fs.writeFile(STORE_FILE, JSON.stringify(data, null, 2));
}

async function saveHistorySnapshot(data: Store, extra?: any) {
  await ensureDirs();
  const snapshot = {
    id: data.draw.id,
    settledAt: new Date().toISOString(),
    draw: data.draw,
    tickets: data.tickets.map(t => ({
      id: t.id,
      userId: t.userId,
      username: t.username,
      combos: t.combos,
      amount: t.amount,
      paid: t.paid,
      hitCount: t.hitCount ?? 0,
    })),
    extra,
  };
  const fname = `draw-${data.draw.id}-${Date.now()}.json`;
  await fs.writeFile(path.join(HISTORY_DIR, fname), JSON.stringify(snapshot, null, 2));
}

// ------------------ –£—Ç–∏–ª–∏—Ç—ã ------------------
function isAdmin(ctx: Context) {
  const uid = ctx.from?.id;
  return !!uid && ADMIN_IDS.includes(uid);
}

function combosCount(selections: number[][]) {
  return selections.reduce((acc, arr) => acc * Math.max(1, arr.length), 1);
}

function totalPrice(selections: number[][]) {
  return combosCount(selections) * BASE_STAKE;
}

function calcHash(str: string) {
  return createHash('sha256').update(str).digest('hex');
}

// ------------------ –ë–æ—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ------------------
const bot = new Telegraf(BOT_TOKEN);
let st: Store;

// –°–µ–∞–Ω—Å—ã (RAM)
const sessions = new Map<number, Session>();

function mainKb() {
  return {
    inline_keyboard: [
      [Markup.button.callback('üé´ –°–æ–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç', 'make')],
      [Markup.button.callback('üìã –ú–æ–∏ –±–∏–ª–µ—Ç—ã', 'my')],
    ],
  };
}

function eventRow(idx: number, sel: number[]) {
  return [
    Markup.button.callback(sel.includes(0) ? '‚úÖ 1' : '1', `sel:${idx}:0`),
    Markup.button.callback(sel.includes(1) ? '‚úÖ X' : 'X', `sel:${idx}:1`),
    Markup.button.callback(sel.includes(2) ? '‚úÖ 2' : '2', `sel:${idx}:2`),
  ];
}

function makeTicketKb(s: Session) {
  const rows = [];
  for (let i = 0; i < EVENTS_COUNT; i++) {
    const sel = s.selections[i] || [];
    rows.push(eventRow(i, sel));
  }
  rows.push([Markup.button.callback('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'save:ticket')]);
  return { inline_keyboard: rows };
}

// –ó–∞–≥–ª—É—à–∫–∏ —Å–æ–±—ã—Ç–∏–π
const placeholderEvents = Array.from({ length: EVENTS_COUNT }, (_, i) => ({
  idx: i,
  title: `–ú–∞—Ç—á ${i + 1}: –ö–æ–º–∞–Ω–¥–∞A ‚Äî –ö–æ–º–∞–Ω–¥–∞B`,
  result: null,
  isVoid: false,
}));

// ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------
bot.start(async (ctx) => {
  st = st || await loadStore();
  await ctx.reply(
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞–ª—é—Ç–∞: ${CURRENCY}. –°–æ–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç, –æ–ø–ª–∞—Ç–∏—Ç–µ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.`,
    { reply_markup: mainKb() }
  );
});

bot.command('help', async (ctx) => {
  await ctx.reply(
    [
      '–ö–æ–º–∞–Ω–¥—ã:',
      '/help ‚Äî –ø–æ–º–æ—â—å',
      '/wallet <TON-–∞–¥—Ä–µ—Å> ‚Äî —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–ª–∞—Ç (TON/USDT –Ω–∞ TON)',
      '/admin ‚Äî –∞–¥–º–∏–Ω-–º–µ–Ω—é',
    ].join('\n')
  );
});

// /wallet ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–ª–∞—Ç
bot.command('wallet', async (ctx) => {
  const uid = ctx.from?.id;
  if (!uid) return;

  const text = (ctx.message as any)?.text || '';
  const parts = text.trim().split(/\s+/);
  if (parts.length < 2) {
    await ctx.reply('–§–æ—Ä–º–∞—Ç:\n/wallet <TON-–∞–¥—Ä–µ—Å>\n\n–ü—Ä–∏–º–µ—Ä:\n/wallet EQC...');
    return;
  }
  const addr = parts[1];
  if (!/^E[QU][A-Za-z0-9_-]{46,}$/.test(addr)) {
    await ctx.reply('–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ TON-–∞–¥—Ä–µ—Å. –ü—Ä–æ–≤–µ—Ä—å –∏ –ø—Ä–∏—à–ª–∏ —Å–Ω–æ–≤–∞.');
    return;
  }

  st = st || await loadStore();
  const u = st.users[String(uid)] || { hasTicketForCurrent: false };
  u.payoutAddress = addr;
  st.users[String(uid)] = u;
  await saveStore(st);
  await ctx.reply('–ê–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–ª–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ');
});

// –ê–¥–º–∏–Ω—Å–∫–∞—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞: /payout <userId> <amount>
bot.command('payout', async (ctx) => {
  if (!isAdmin(ctx)) return;
  const text = (ctx.message as any)?.text || '';
  const m = text.match(/\/payout\s+(\d+)\s+([0-9]+(?:\.[0-9]+)?)/);
  if (!m) {
    await ctx.reply('–§–æ—Ä–º–∞—Ç: /payout <userId> <amount>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /payout 123456789 12.5');
    return;
  }
  const userId = Number(m[1]);
  const amount = Number(m[2]);
  st = st || await loadStore();
  const addr = st.users?.[String(userId)]?.payoutAddress;
  if (!addr) {
    await ctx.reply('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å /wallet');
    return;
  }
  try {
    if (CURRENCY === 'TON') {
      const res = await sendTon({ toAddress: addr, amountTon: amount, comment: `Prize draw #${st.draw.id}` });
      await ctx.reply(`–í—ã–ø–ª–∞—Ç–∞ TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. userId=${userId}, amount=${amount}\nTx: ${res.txHash || ''}`);
    } else {
      const res = await sendJetton({ toAddress: addr, amountTokens: amount, comment: `Prize draw #${st.draw.id}` });
      await ctx.reply(`–í—ã–ø–ª–∞—Ç–∞ USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. userId=${userId}, amount=${amount}\nTx: ${res.txHash || ''}`);
    }
    try { await bot.telegram.sendMessage(userId, `–í–∞–º –≤—ã–ø–ª–∞—á–µ–Ω–æ ${amount} ${CURRENCY} –∑–∞ —Ç–∏—Ä–∞–∂ #${st.draw.id}.`); } catch {}
  } catch (e) {
    console.error('payout error', e);
    await ctx.reply('–û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã');
  }
});

// ------------------ –ê–¥–º–∏–Ω–∫–∞ ------------------
function adminKb(draw: Draw) {
  const rows = [
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'a:add')],
    [Markup.button.callback('‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', 'a:rename')],
    [
      Markup.button.callback('üü¢ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º', 'a:open'),
      Markup.button.callback('üî¥ –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º', 'a:close'),
    ],
    [Markup.button.callback('üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã/void', 'a:results')],
    [Markup.button.callback('üìä –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–∏ (settle)', 'a:settle')],
    [Markup.button.callback('üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–Ω–∫ + –≤—ã–ø–ª–∞—Ç–∏—Ç—å', 'a:auto_payout')], // NEW
    [Markup.button.callback('üì£ –†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'a:broadcast')],
    [Markup.button.callback('üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫', 'a:list')],
  ];
  return { inline_keyboard: rows };
}

bot.command('admin', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  adminState.set(ctx.from!.id, { mode: 'IDLE' });
  await ctx.reply(
    `–ê–¥–º–∏–Ω-–º–µ–Ω—é. –¢–∏—Ä–∞–∂ #${st.draw.id}, —Å—Ç–∞—Ç—É—Å: ${st.draw.status}.
–°—Ç–∞–≤–∫–∞: ${BASE_STAKE} ${CURRENCY}, —Å–æ–±—ã—Ç–∏–π: ${EVENTS_COUNT}`,
    { reply_markup: adminKb(st.draw) }
  );
});

const adminState = new Map<number, { mode: 'IDLE' | 'RENAME'; evIdx?: number }>();

bot.action('a:add', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const evIdx = st.draw.events.length;
  if (evIdx >= EVENTS_COUNT) {
    await ctx.answerCbQuery('–£–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–±—ã—Ç–∏–π');
    return;
  }
  st.draw.events.push({ idx: evIdx, title: `–ú–∞—Ç—á ${evIdx + 1}: –ö–æ–º–∞–Ω–¥–∞A ‚Äî –ö–æ–º–∞–Ω–¥–∞B`, result: null, isVoid: false });
  await saveStore(st);
  await ctx.answerCbQuery('–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
});

bot.action('a:rename', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  adminState.set(ctx.from!.id, { mode: 'RENAME', evIdx: 0 });
  await ctx.answerCbQuery('–ü—Ä–∏—à–ª–∏—Ç–µ: –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏ –Ω–æ–≤–æ–µ –∏–º—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.\n–ü—Ä–∏–º–µ—Ä: 1. –†–µ–∞–ª ‚Äî –ë–∞—Ä—Å–∞');
});

bot.action('a:open', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  st.draw.status = 'open';
  if (st.draw.events.length === 0) {
    st.draw.events = placeholderEvents.map(e => ({ ...e }));
  }
  await saveStore(st);
  await ctx.answerCbQuery('–ü—Ä–∏—ë–º –æ—Ç–∫—Ä—ã—Ç');
});

bot.action('a:close', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  st.draw.status = 'closed';
  await saveStore(st);
  await ctx.answerCbQuery('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç');
});

bot.action('a:results', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const rows = st.draw.events.map((ev) => {
    const res = ev.isVoid ? 'void' : (ev.result !== null ? OUTCOMES[ev.result] : '?');
    return [Markup.button.callback(`${String(ev.idx + 1).padStart(2, '0')} ${res}`, `r:${ev.idx}`)];
  });
  rows.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'a:back')]);
  await ctx.editMessageText('–í—ã—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Äî toggle void).', {
    reply_markup: { inline_keyboard: rows },
  });
});

bot.action(/^r:(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const ev = st.draw.events[Number(ctx.match[1])];
  if (!ev) {
    await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    return;
  }
  if (ev.isVoid) {
    ev.isVoid = false;
    ev.result = (ev.result === null ? 0 : (ev.result + 1) % 3);
  } else {
    ev.result = (ev.result === null ? 0 : (ev.result + 1) % 3);
    if (ev.result === 0) ev.isVoid = true;
  }
  await saveStore(st);
  await ctx.answerCbQuery('OK');
});

bot.action('a:back', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  await ctx.editMessageText(
    `–ê–¥–º–∏–Ω-–º–µ–Ω—é. –¢–∏—Ä–∞–∂ #${st.draw.id}, —Å—Ç–∞—Ç—É—Å: ${st.draw.status}.`,
    { reply_markup: adminKb(st.draw) }
  );
});

// ------------------ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ ------------------
bot.action('make', async (ctx) => {
  st = st || await loadStore();
  if (st.draw.status === 'setup') {
    st.draw.events = placeholderEvents.map(e => ({ ...e }));
    st.draw.status = 'open';
    await saveStore(st);
  }
  sessions.set(ctx.from!.id, { selections: Array.from({ length: EVENTS_COUNT }, () => []) });
  await ctx.editMessageText(
    '–û—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ö–æ–¥—ã (1/X/2) –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.',
    { reply_markup: makeTicketKb(sessions.get(ctx.from!.id)!) }
  );
});

bot.action(/^sel:(\d+):(\d+)$/, async (ctx) => {
  const idx = Number(ctx.match[1]);
  const out = Number(ctx.match[2]);
  const sess = sessions.get(ctx.from!.id);
  if (!sess) return;

  const a = new Set(sess.selections[idx] || []);
  if (a.has(out)) a.delete(out); else a.add(out);
  sess.selections[idx] = Array.from(a).sort();
  await ctx.editMessageReplyMarkup(makeTicketKb(sess));
});

// ------------------ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ + –æ–ø–ª–∞—Ç–∞ ------------------
bot.action('save:ticket', async (ctx) => {
  try {
    if (!st) st = await loadStore();
    const uid = ctx.from?.id!;
    if (st.draw.status !== 'open') {
      await ctx.answerCbQuery(`–ü—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç (—Å—Ç–∞—Ç—É—Å: ${st.draw.status})`);
      return;
    }
    if (st.draw.events.length !== EVENTS_COUNT) {
      await ctx.answerCbQuery(`–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (${st.draw.events.length}/${EVENTS_COUNT})`);
      return;
    }
    const s = sessions.get(uid);
    if (!s) {
      await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ö–æ–¥—ã');
      return;
    }

    const combos = combosCount(s.selections);
    const amount = totalPrice(s.selections);

    const ticketId = `${uid}-${Date.now()}`;
    const ticket: Ticket = {
      id: ticketId,
      userId: uid,
      username: ctx.from?.username,
      selections: s.selections.map(a => [...a]),
      combos,
      amount,
      paidAmount: amount,
      createdAt: new Date().toISOString(),
      paid: false,
      paymentComment: `TICKET:${ticketId}`,
    };

    if (!isTonConfigured()) {
      await ctx.reply('–ü–ª–∞—Ç—ë–∂–Ω–∞—è —á–∞—Å—Ç—å TON –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return;
    }

    const receiveAddr = getReceiveAddress(); // –¥–ª—è TON —ç—Ç–æ –∞–¥—Ä–µ—Å-–∫–æ—à–µ–ª–µ–∫, –¥–ª—è USDT —ç—Ç–æ base owner (–≤—ã–ø–ª–∞—Ç–∞) ‚Äî —Å–º. –ø–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–∏–∂–µ
    const assetKind = getAssetKind(); // 'TON' | 'USDT_TON'

    const instructions = assetKind === 'TON'
      ? [
          '–û–ø–ª–∞—Ç–∏—Ç–µ –±–∏–ª–µ—Ç –Ω–µ–∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω–æ –≤ *TON*:',
          '',
          `1) –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π TON-–∫–æ—à–µ–ª—ë–∫ (Tonkeeper / MyTonWallet).`,
          `2) –û—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ä–æ–≤–Ω–æ* ${amount} TON –Ω–∞ –∞–¥—Ä–µ—Å:`,
          '`' + receiveAddr + '`',
          `3) –í *–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏* —É–∫–∞–∂–∏—Ç–µ: \`${ticket.paymentComment}\``,
          '',
          '–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂¬ª.',
        ]
      : [
          '–û–ø–ª–∞—Ç–∏—Ç–µ –±–∏–ª–µ—Ç –Ω–µ–∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω–æ –≤ *USDT (jetton –Ω–∞ TON)*:',
          '',
          `1) –í –∫–æ—à–µ–ª—å–∫–µ (Tonkeeper/MyTonWallet) –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ *—Ä–æ–≤–Ω–æ* ${amount} USDT (TON) –Ω–∞ *–≤–∞—à* USDT-jetton wallet, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π –∞–¥—Ä–µ—Å—É –ø—Ä–∏—ë–º–∞.`,
          `   –ê–¥—Ä–µ—Å –±–∞–∑–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏—ë–º–∞:`,
          '`' + receiveAddr + '`',
          '   (–∫–æ—à–µ–ª—ë–∫ jetton –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏; –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç –µ–≥–æ —Å–∞–º–∏).',
          `2) –í *–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/forward payload* —É–∫–∞–∂–∏—Ç–µ: \`${ticket.paymentComment}\`.`,
          '',
          '–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂¬ª.',
          '',
          '_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –º–æ–≥—É—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å forward-payload. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—É–º–º—ã._',
        ];

    await ctx.reply(instructions.join('\n'), {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: [[ Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂', `pay:check:${ticket.id}`) ]] }
    });

    if (!st.users) st.users = {};
    st.tickets.push(ticket);
    st.users[uid.toString()] = { hasTicketForCurrent: true };
    await saveStore(st);

    await ctx.answerCbQuery('–ë–∏–ª–µ—Ç —Å–æ–∑–¥–∞–Ω!');
    await ctx.reply(
      `–ë–∏–ª–µ—Ç *#${ticket.id}* —Å–æ–∑–¥–∞–Ω.\n–ö–æ–º–±–∏–Ω–∞—Ü–∏–π: *${combos}*\n–°—É–º–º–∞: *${amount} ${CURRENCY}*\n–°—Ç–∞—Ç—É—Å: *–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã*`,
      { parse_mode: 'Markdown' }
    );
  } catch (e) {
    console.error(`Error in save:ticket for user ${ctx.from?.id}:`, e);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (TON –∏–ª–∏ USDT_TON)
bot.action(/^pay:check:(.+)$/, async (ctx) => {
  try {
    const uid = ctx.from?.id;
    if (!uid) return;

    const ticketId = ctx.match[1];
    st = st || await loadStore();
    const t = st.tickets.find(x => x.id === ticketId && x.userId === uid);
    if (!t) {
      await ctx.answerCbQuery('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    if (t.paid) {
      await ctx.answerCbQuery('–£–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚úÖ');
      return;
    }
    if (!isTonConfigured()) {
      await ctx.answerCbQuery('TON –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    const assetKind = getAssetKind();
    let found = false;

    if (assetKind === 'TON') {
      const res = await checkTonPayment({
        toAddress: getReceiveAddress(),
        expectedAmountTon: t.amount,
        comment: t.paymentComment || `TICKET:${t.id}`,
      });
      found = res.found;
    } else {
      const res = await checkJettonPayment({
        ownerBaseAddress: getReceiveAddress(),
        expectedAmountTokens: t.amount,
        comment: t.paymentComment || `TICKET:${t.id}`,
      });
      found = res.found;
    }

    if (found) {
      t.paid = true;
      await saveStore(st);
      await ctx.answerCbQuery('–ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω ‚úÖ');
      await ctx.editMessageReplyMarkup(undefined);
      await ctx.reply(`–ë–∏–ª–µ—Ç #${t.id} –æ–ø–ª–∞—á–µ–Ω. –£–¥–∞—á–∏!`);
    } else {
      await ctx.answerCbQuery('–ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
    }
  } catch (e) {
    console.error('pay check error:', e);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }
});

// ------------------ –°–ø–∏—Å–∫–∏, settle, —Ä–∞—Å—Å—ã–ª–∫–∞ ------------------
bot.action('my', async (ctx) => {
  st = st || await loadStore();
  const uid = ctx.from!.id;
  const mine = st.tickets.filter(t => t.userId === uid).slice(-10);
  if (!mine.length) {
    await ctx.answerCbQuery('');
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤.');
    return;
  }
  await ctx.answerCbQuery('');
  const lines = mine.map(t => {
    const paid = t.paid ? '‚úÖ' : '‚åõ';
    return `#${t.id} ‚Äî ${t.combos} –∫–æ–º–±., ${t.amount} ${CURRENCY}, –æ–ø–ª–∞—á–µ–Ω–æ: ${paid}`;
  });
  await ctx.reply(lines.join('\n'));
});

bot.action('a:list', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const lines = st.tickets.map(t => {
    const paid = t.paid ? '‚úÖ' : '‚åõ';
    return `#${t.id} | u:${t.userId} | ${t.combos} | ${t.amount} ${CURRENCY} | ${paid}`;
  });
  await ctx.answerCbQuery('');
  await ctx.reply(lines.slice(-50).join('\n') || '–ü—É—Å—Ç–æ');
});

bot.action('a:settle', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();

  if (st.draw.status === 'settled') {
    await ctx.answerCbQuery('–£–∂–µ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ');
    return;
  }
  if (st.draw.status === 'open') {
    await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏—ë–º');
    return;
  }

  for (const ev of st.draw.events) {
    if (!ev.isVoid && ev.result === null) {
      await ctx.answerCbQuery('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∫—Ä–æ–º–µ void)');
      return;
    }
  }

  // –ü–æ–¥—Å—á—ë—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π
  for (const t of st.tickets) {
    t.hitCount = (function calcHits(selections: number[][], draw: Draw) {
      let hits = 0;
      for (let i = 0; i < draw.events.length; i++) {
        const ev = draw.events[i];
        if (ev.isVoid) continue;
        if (ev.result === null) continue;
        const sel = selections[i] || [];
        if (sel.includes(ev.result)) hits++;
      }
      return hits;
    })(t.selections, st.draw);
  }

  st.draw.status = 'settled';
  await saveStore(st);
  await saveHistorySnapshot(st);
  await ctx.answerCbQuery('');
  await ctx.reply('–ò—Ç–æ–≥–∏ –ø–æ—Å—á–∏—Ç–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ ¬´–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–Ω–∫ + –≤—ã–ø–ª–∞—Ç–∏—Ç—å¬ª.');
});

// ---------- –ê–í–¢–û-–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ë–ê–ù–ö–ê + –ú–ê–°–°–û–í–´–ï –í–´–ü–õ–ê–¢–´ ----------
bot.action('a:auto_payout', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();

  if (st.draw.status !== 'settled') {
    await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ –∏—Ç–æ–≥–∏ (settle)');
    return;
  }

  // –ë–∞–Ω–∫ = —Å—É–º–º–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
  const paidTickets = st.tickets.filter(t => t.paid);
  const totalBank = paidTickets.reduce((s, t) => s + t.amount, 0);
  const prizePool = totalBank * PRIZE_POOL_PCT;
  const house = totalBank - prizePool;

  // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Ç–∏—Ä—É
  const tiers = [
    { hits: TIER1_HITS, share: TIER1_SHARE, winners: [] as Ticket[] },
    { hits: TIER2_HITS, share: TIER2_SHARE, winners: [] as Ticket[] },
    { hits: TIER3_HITS, share: TIER3_SHARE, winners: [] as Ticket[] },
  ];

  for (const t of paidTickets) {
    for (const tr of tiers) {
      if ((t.hitCount || 0) === tr.hits) tr.winners.push(t);
    }
  }

  // –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –µ—Å–ª–∏ –≤ —Ç–∏—Ä—É –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî share —É—Ö–æ–¥–∏—Ç –Ω–∏–∂–µ, –∫ –ø–µ—Ä–≤–æ–º—É —Ç–∏—Ä—É, –≥–¥–µ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏
  let remaining = prizePool;
  const tierPools: number[] = [0, 0, 0];

  // 1) –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–º –ø–æ –¥–æ–ª—è–º
  const pre = tiers.map(tr => tr.share * prizePool);
  // 2) –µ—Å–ª–∏ –≤ —Ç–∏—Ä—É –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî –∫–æ–ø–∏–º –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
  let carry = 0;
  for (let i = 0; i < tiers.length; i++) {
    if (tiers[i].winners.length > 0) {
      tierPools[i] = pre[i];
    } else {
      carry += pre[i];
    }
  }
  // 3) —Ä–∞–∑–¥–∞—Ç—å carry –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–µ—Ä–≤—ã–º —Ç–∏—Ä–∞–º–∏, –≥–¥–µ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏
  if (carry > 0) {
    for (let i = 0; i < tiers.length; i++) {
      if (tiers[i].winners.length > 0) {
        tierPools[i] += carry;
        carry = 0;
        break;
      }
    }
  }
  remaining = tierPools.reduce((s, x) => s + x, 0);

  // –í—ã–ø–ª–∞—Ç—ã: —Ä–∞–≤–Ω—ã–º–∏ –¥–æ–ª—è–º–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ç–∏—Ä–∞
  const assetKind = getAssetKind();
  const results: string[] = [];
  for (let i = 0; i < tiers.length; i++) {
    const tr = tiers[i];
    const pool = tierPools[i];
    if (pool <= 0 || tr.winners.length === 0) {
      results.push(`–¢–∏—Ä ${tr.hits}: –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç (–ø—É–ª 0).`);
      continue;
    }
    const perWinner = pool / tr.winners.length;

    results.push(`–¢–∏—Ä ${tr.hits}: ${tr.winners.length} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –ø—É–ª ${pool.toFixed(6)} ${CURRENCY}, –ø–æ ${perWinner.toFixed(6)}.`);

    // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    for (const t of tr.winners) {
      const userId = t.userId;
      const addr = st.users?.[String(userId)]?.payoutAddress;
      if (!addr) {
        try { await bot.telegram.sendMessage(userId, `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${perWinner.toFixed(6)} ${CURRENCY}, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å /wallet.`); } catch {}
        results.push(` - user ${userId}: –Ω–µ—Ç /wallet`);
        continue;
      }
      try {
        if (assetKind === 'TON') {
          const res = await sendTon({ toAddress: addr, amountTon: perWinner, comment: `Prize draw #${st.draw.id} (${tr.hits} hits)` });
          results.push(` - user ${userId}: –≤—ã–ø–ª–∞—Ç–∏–ª TON ${perWinner.toFixed(6)} (tx ${res.txHash || ''})`);
        } else {
          const res = await sendJetton({ toAddress: addr, amountTokens: perWinner, comment: `Prize draw #${st.draw.id} (${tr.hits} hits)` });
          results.push(` - user ${userId}: –≤—ã–ø–ª–∞—Ç–∏–ª USDT ${perWinner.toFixed(6)} (tx ${res.txHash || ''})`);
        }
        try { await bot.telegram.sendMessage(userId, `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã–ø–ª–∞—Ç–∞ ${perWinner.toFixed(6)} ${CURRENCY} –∑–∞ —Ç–∏—Ä–∞–∂ #${st.draw.id}.`); } catch {}
      } catch (e) {
        console.error('mass payout error', e);
        results.push(` - user ${userId}: ERROR –æ—Ç–ø—Ä–∞–≤–∫–∏`);
      }
    }
  }

  await saveHistorySnapshot(st, {
    prizePool,
    house,
    tierPools,
    totals: { totalBank, prizePool, house, currency: CURRENCY }
  });

  await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
  await ctx.reply(
    [
      `*–ê–≤—Ç–æ-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—ã–ø–ª–∞—Ç—ã –ø–æ —Ç–∏—Ä–∞–∂—É #${st.draw.id}*`,
      `–ë–∞–Ω–∫ (–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã): ${totalBank.toFixed(6)} ${CURRENCY}`,
      `–§–æ–Ω–¥ –ø—Ä–∏–∑–æ–≤ (${(PRIZE_POOL_PCT * 100).toFixed(1)}%): ${prizePool.toFixed(6)} ${CURRENCY}`,
      `–û—Ä–≥. —á–∞—Å—Ç—å: ${house.toFixed(6)} ${CURRENCY}`,
      '',
      ...results,
    ].join('\n'),
    { parse_mode: 'Markdown' }
  );
});

// –†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–Ω—Ñ–æ)
bot.action('a:broadcast', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  if (st.draw.status !== 'settled') {
    await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ /settle');
    return;
  }
  await ctx.answerCbQuery('');

  const winners = [...st.tickets]
    .filter(t => t.paid)
    .sort((a, b) => (b.hitCount || 0) - (a.hitCount || 0));

  const lines = [
    `*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∏—Ä–∞–∂–∞ #${st.draw.id}*`,
    ...st.draw.events.map((ev) => {
      const res = ev.isVoid ? 'void' : (ev.result !== null ? OUTCOMES[ev.result] : '?');
      return `${String(ev.idx + 1).padStart(2, '0')}. ${ev.title} ‚Äî *${res}*`;
    }),
  ];
  await ctx.reply(lines.join('\n'), { parse_mode: 'Markdown' });

  const notified = new Set<number>();
  for (const t of winners) {
    if (notified.has(t.userId)) continue;
    notified.add(t.userId);
    try {
      await bot.telegram.sendMessage(
        t.userId,
        `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–∏—Ä–∞–∂—É #${st.draw.id}: *${t.hitCount}*.\n–ë–∏–ª–µ—Ç #${t.id}, –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${t.combos}, —Å—É–º–º–∞: ${t.amount} ${CURRENCY}.`,
        { parse_mode: 'Markdown' }
      );
    } catch { /* ignore */ }
  }
  await ctx.reply(`–†–∞–∑–æ—Å–ª–∞–Ω–æ ${notified.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
});

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∞–¥–º–∏–Ω, —Ç–µ–∫—Å—Ç–æ–º)
bot.on('text', async (ctx) => {
  const uid = ctx.from?.id;
  if (!uid) return;

  const state = adminState.get(uid);
  if (!state || state.mode === 'IDLE') return;
  if (!isAdmin(ctx)) return;

  const text = (ctx.message as any)?.text || '';
  if (state.mode === 'RENAME') {
    const m = text.match(/^\s*(\d+)\.\s*(.+?)\s*$/);
    if (!m) {
      await ctx.reply('–§–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä. –Ω–æ–≤–æ–µ –∏–º—è\n–ü—Ä–∏–º–µ—Ä: 2. –ú–∏–ª–∞–Ω ‚Äî –ò–Ω—Ç–µ—Ä');
      return;
    }
    const idx = Number(m[1]) - 1;
    const name = m[2];
    st = st || await loadStore();
    const ev = st.draw.events[idx];
    if (!ev) {
      await ctx.reply('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
      return;
    }
    ev.title = name;
    await saveStore(st);
    adminState.set(uid, { mode: 'IDLE' });
    await ctx.reply('–û–∫', { reply_markup: adminKb(st.draw) });
  }
});

// ------------------ –ó–∞–ø—É—Å–∫ ------------------
(async () => {
  try {
    st = await loadStore();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    try {
      if (isTonConfigured()) {
        await initTon();
        console.log('TON initialized');
      } else {
        console.log('TON not configured');
      }
    } catch (e) {
      console.error('TON init error', e);
    }

    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ POLLING —Ä–µ–∂–∏–º–µ...');
    await bot.launch();
    console.log(
      `‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Draw #${st.draw.id} status=${st.draw.status}, EVENTS_COUNT=${EVENTS_COUNT}, BASE_STAKE=${BASE_STAKE} ${CURRENCY}`
    );
  } catch (error) {
    console.error(`Failed to start bot: ${error}`);
    process.exit(1);
  }
})();

process.once('SIGINT', async () => {
  console.log('SIGINT received, shutting down gracefully');
  try { await bot.stop('SIGINT'); } catch {}
  process.exit(0);
});

process.once('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down gracefully');
  try { await bot.stop('SIGTERM'); } catch {}
  process.exit(0);
});
