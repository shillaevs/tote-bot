// bot.ts ‚Äî —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä 15√ó3 –±–µ–∑ –ø–ª–∞—Ç—ë–∂–∫–∏: –±–∏–ª–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ data/store.json
// –ó–∞–ø—É—Å–∫: pm2 start "npx ts-node --compiler-options '{\"module\":\"commonjs\"}' bot.ts" --name tote-bot --cwd /tote-bot

import * as dotenv from 'dotenv';
dotenv.config();

import { Telegraf, Context, Markup } from 'telegraf';
import type { InlineKeyboardMarkup } from 'telegraf/types';
// +++ PAYMENTS/TON +++
import { initTon, checkTonPayment, checkJettonPayment, sendJetton } from './ton.js';
import { calculatePayouts, type FormulaName } from './settlement.js';

import * as fs from 'fs/promises';
import * as path from 'path';

// --------------- .env ---------------
const BOT_TOKEN = process.env.BOT_TOKEN || '';
if (!BOT_TOKEN) {
  console.error('ERROR: BOT_TOKEN is empty. Put it into .env');
  process.exit(1);
}
const ADMIN_IDS: number[] = (process.env.ADMIN_IDS || '')
  .split(',')
  .map(s => Number(s.trim()))
  .filter(Boolean);

const EVENTS_COUNT = Number(process.env.EVENTS_COUNT || 15);
const PAGE_SIZE = 10;           // "–ú–æ–∏ –±–∏–ª–µ—Ç—ã": —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const ADMIN_PAGE_SIZE = 15;     // "–ê–¥–º–∏–Ω: –±–∏–ª–µ—Ç—ã": —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const ADMIN_EDIT_PAGE_SIZE = 5; // üëà —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ "–†–µ–¥–∞–∫—Ç–æ—Ä–µ —Å–æ–±—ã—Ç–∏–π"

// –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Ä—É–±) –∑–∞ ¬´–æ–¥–∏–Ω–æ—á–Ω—ã–π¬ª –±–∏–ª–µ—Ç (–ø–æ –æ–¥–Ω–æ–º—É –∏—Å—Ö–æ–¥—É –≤ –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏–∏)
const STAKE_RUB = Number(process.env.STAKE_RUB || 100);

// === TON / PAYOUT ENV ===
const TON_NETWORK = (process.env.TON_NETWORK || 'testnet').toLowerCase();   // mainnet | testnet
const TON_RECEIVE_ADDRESS = process.env.TON_RECEIVE_ADDRESS || '';
const TON_MIN_CONFIRMATIONS = Number(process.env.TON_MIN_CONFIRMATIONS || 1);
const CURRENCY = (process.env.CURRENCY || 'TON').toUpperCase() as 'USDT_TON' | 'TON';
const STAKE_USDT = Number(process.env.STAKE_USDT || 0.1); // —Ü–µ–Ω–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞ (TON –ø—Ä–∏ —Ç–µ—Å—Ç–∞—Ö)

const PAYOUT_FORMULA = (process.env.PAYOUT_FORMULA || 'MAX_HITS_EQUAL_SHARE') as FormulaName;
function __readJSONEnv(name: string, fallback: any) {
  try { return JSON.parse(process.env[name] || ''); } catch { return fallback; }
}
const PAYOUT_PARAMS_MAX_HITS_EQUAL_SHARE = __readJSONEnv('PAYOUT_PARAMS_MAX_HITS_EQUAL_SHARE', { prizePoolPct: 0.90, rolloverIfNoWinners: true });
const PAYOUT_PARAMS_TIERED_WEIGHTS       = __readJSONEnv('PAYOUT_PARAMS_TIERED_WEIGHTS',       { prizePoolPct: 0.90, weights: { "15": 70, "14": 20, "13": 10 }, minHits: 13, rolloverUnclaimed: true });
const PAYOUT_PARAMS_FIXED_TABLE          = __readJSONEnv('PAYOUT_PARAMS_FIXED_TABLE',          { fixed: { "15": 10000, "14": 1500, "13": 250 }, rolloverUnclaimed: true });

// --------------- –¢–∏–ø—ã ---------------
type DrawStatus = 'setup' | 'open' | 'closed' | 'settled';

interface EventItem {
  idx: number;
  title: string;
  result: number | null; // 0,1,2 –∏–ª–∏ null
  isVoid: boolean;
  sourceUrl?: string; // –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
}

interface Settlement {
  settledAt: string;
  totalPlayed: number; // —á–∏—Å–ª–æ –Ω–µ-void —Å–æ–±—ã—Ç–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
  maxHits: number;     // –º–∞–∫—Å–∏–º—É–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  bankRUB: number;     // —Å—É–º–º–∞ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫
  bankUSDT?: number;   // —Å—É–º–º–∞ –±–∞–Ω–∫–∞ –≤ USDT/TON –≤–∞–ª—é—Ç–µ –≤—ã–ø–ª–∞—Ç
  formulaName?: string;
  formulaParams?: any;
  formulaVersion?: string;
  winners: { ticketId: string; userId: number; username?: string; hits: number; prizeRUB: number; prizeUSDT?: number }[];
}

interface Draw {
  id: number;
  status: DrawStatus;
  createdAt: string;
  events: EventItem[];
  settlement?: Settlement;
}

const OUTCOMES = ['1', 'X', '2'];                  // –∫–æ–º–ø–∞–∫—Ç–Ω–æ (–¥–ª—è CSV/TXT)
const OUT_TEXT = ['–ü–æ–±–µ–¥–∞ 1', '–ù–∏—á—å—è', '–ü–æ–±–µ–¥–∞ 2']; // –∫—Ä–∞—Å–∏–≤–æ (–¥–ª—è UI)

interface Ticket {
  id: string;
  userId: number;
  username?: string;
  selections: number[][];
  createdAt: string;
}

interface UserData {
  hasTicketForCurrent: boolean;
  wallet?: string;
  username?: string;
}

interface Store {
  draw: Draw;
  tickets: Ticket[];
  nextTicketSeq: number;
  users: { [userId: string]: UserData };
  payments?: {
    [invoiceId: string]: {
      userId: number;
      currency: 'USDT_TON' | 'TON';
      amount: number;
      comment: string;
      paid: boolean;
      txHash?: string;
      createdAt: string;
    }
  };
}

interface Session {
  selections: number[][];
}

// --------------- FS ---------------
const DATA_DIR = path.join(process.cwd(), 'data');
const STORE_FILE = path.join(DATA_DIR, 'store.json');

async function ensureDirs() {
  await fs.mkdir(DATA_DIR, { recursive: true });
}

async function loadStore(): Promise<Store> {
  await ensureDirs();
  try {
    const raw = await fs.readFile(STORE_FILE, 'utf8');
    const data = JSON.parse(raw);

    if (!Array.isArray(data.tickets)) data.tickets = [];
    if (!data.users || typeof data.users !== 'object' || Array.isArray(data.users)) {
      data.users = {};
    }
    if (!data.draw) {
      data.draw = {
        id: 1,
        status: 'setup',
        createdAt: new Date().toISOString(),
        events: [],
      };
    }
    if (typeof data.nextTicketSeq !== 'number') {
      data.nextTicketSeq = 1;
    }
    return data as Store;
  } catch {
    const initial: Store = {
      draw: { id: 1, status: 'setup', createdAt: new Date().toISOString(), events: [] },
      tickets: [],
      nextTicketSeq: 1,
      users: {},
    };
    await fs.writeFile(STORE_FILE, JSON.stringify(initial, null, 2));
    return initial;
  }
}

async function saveStore(data: Store) {
  if (!data.users || typeof data.users !== 'object' || Array.isArray(data.users)) {
    data.users = {};
  }
  await fs.writeFile(STORE_FILE, JSON.stringify(data, null, 2));
}

// --------------- –ë–æ—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---------------
const bot = new Telegraf(BOT_TOKEN);
let st: Store;

const sessions = new Map<number, Session>();

// --------------- –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–ø–æ–¥—Å—á—ë—Ç–∞ ---------------
function esc(s: string) {
  return String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
const fmtMoney = (n: number) => n.toLocaleString('ru-RU');

function playedEventsCount() {
  const evs = st?.draw?.events || [];
  return evs.filter(e => e && e.result !== null && !e.isVoid).length;
}

function computeHits(t: Ticket): number {
  if (!st?.draw?.events) return 0;
  let hits = 0;
  for (let i = 0; i < st.draw.events.length; i++) {
    const ev = st.draw.events[i];
    if (!ev || ev.result === null || ev.isVoid) continue;
    const sel = t.selections[i] || [];
    if (sel.includes(ev.result)) hits++;
  }
  return hits;
}

// === –ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞ –¥–ª—è —Ü–µ–Ω—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–∞ ===
function countCombinations(selections: number[][]): number {
  if (!selections || !selections.length) return 0;
  let prod = 1;
  for (const s of selections) {
    const len = (s && s.length) ? s.length : 0;
    if (len === 0) return 0;
    prod *= len;
  }
  return prod;
}

function genInvoice(userId: number, drawId: number) {
  const nonce = Math.random().toString(36).slice(2, 8).toUpperCase();
  const invoiceId = `INV-${drawId}-${userId}-${Date.now()}-${nonce}`;
  const comment = `TOTE-${drawId}-${userId}-${nonce}`;
  return { invoiceId, comment };
}

// === –§–æ—Ä–º—É–ª–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ Toto-15 ===

// --- –û–ø–ª–∞—Ç–∞ –∏ –≤—ã–ø—É—Å–∫ –±–∏–ª–µ—Ç–∞ ---
bot.action('buy', async (ctx) => {
  st = st || await loadStore();
  const uid = ctx.from?.id!;
  if (st.draw.status !== 'open') { await ctx.answerCbQuery('–ü—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç'); return; }
  const sess = sessions.get(uid);
  if (!sess) { await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥—ã –±–∏–ª–µ—Ç–∞'); return; }
  const combos = countCombinations(sess.selections);
  if (combos <= 0) { await ctx.answerCbQuery('–ë–∏–ª–µ—Ç –ø—É—Å—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥—ã'); return; }

  const amount = (CURRENCY === 'USDT_TON') ? +(STAKE_USDT * combos).toFixed(6) : +(STAKE_USDT * combos).toFixed(6);

  const { invoiceId, comment } = genInvoice(uid, st.draw.id);
  st.payments = st.payments || {};
  st.payments[invoiceId] = { userId: uid, currency: CURRENCY, amount, comment, paid: false, createdAt: new Date().toISOString() };
  await saveStore(st);

  const text = [
    '<b>–û–ø–ª–∞—Ç–∞ –±–∏–ª–µ—Ç–∞</b>',
    '',
    `–°—É–º–º–∞: <b>${amount} ${CURRENCY === 'USDT_TON' ? 'USDT' : 'TON'}</b>`,
    `–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: <code>${TON_RECEIVE_ADDRESS}</code>`,
    `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <code>${comment}</code>`,
    '',
    '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.',
  ].join('\n');

  await ctx.reply(text, { parse_mode: 'HTML', reply_markup: { inline_keyboard: [ [Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', `pay:check:${invoiceId}`)], [Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')] ] } });
});

bot.action(/^pay:check:(.+)$/, async (ctx) => {
  st = st || await loadStore();
  const invoiceId = ctx.match[1];
  const rec = st.payments?.[invoiceId];
  if (!rec) { await ctx.answerCbQuery('–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }
  if (rec.paid) { await ctx.answerCbQuery('–£–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ'); return; }

  let found = false, txHash = '';
  if (rec.currency === 'USDT_TON') {
    const res = await checkJettonPayment({ ownerBaseAddress: TON_RECEIVE_ADDRESS, expectedAmountTokens: rec.amount, comment: rec.comment, minConfirmations: TON_MIN_CONFIRMATIONS });
    found = (res as any).found; txHash = (res as any).txHash || '';
  } else {
    const res = await checkTonPayment({ toAddress: TON_RECEIVE_ADDRESS, expectedAmountTon: rec.amount, comment: rec.comment, minConfirmations: TON_MIN_CONFIRMATIONS });
    found = (res as any).found; txHash = (res as any).txHash || '';
  }

  if (!found) { await ctx.answerCbQuery('–ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'); return; }

  rec.paid = true; rec.txHash = txHash;
  await saveStore(st);

  const uid = rec.userId;
  const sess = sessions.get(uid);
  if (!sess) { await ctx.reply('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –±–∏–ª–µ—Ç –∑–∞–Ω–æ–≤–æ.'); return; }

  const tId = `T${Date.now()}_${Math.random().toString(36).slice(2,6)}`;
  const ticket = { id: tId, userId: uid, username: ctx.from?.username, selections: sess.selections.map(a => a.slice()), createdAt: new Date().toISOString() };
  st.tickets.push(ticket);
  st.users[uid] = st.users[uid] || { hasTicketForCurrent: false };
  st.users[uid].hasTicketForCurrent = true;
  st.draw.settlement = st.draw.settlement || { settledAt: '', totalPlayed: 0, maxHits: 0, bankRUB: 0, winners: [] };
  st.draw.settlement.bankUSDT = +(st.draw.settlement.bankUSDT || 0) + rec.amount;

  await saveStore(st);
  await ctx.reply(`‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞.\n–ë–∏–ª–µ—Ç –≤—ã–ø—É—â–µ–Ω: ${tId}`, { reply_markup: homeKbInline() });
});
function calcStakeRUB(selections: number[][], base = STAKE_RUB): number {
  const mult = selections.reduce((acc, s) => acc * (s.length || 1), 1);
  return base * mult;
}
function stakeBreakdown(selections: number[][]) {
  let singles = 0, doubles = 0, triples = 0;
  for (const s of selections) {
    const n = s?.length || 0;
    if (n <= 1) singles++;
    else if (n === 2) doubles++;
    else triples++;
  }
  const mult = selections.reduce((acc, s) => acc * (s.length || 1), 1);
  return { singles, doubles, triples, mult };
}
function formatStakeLine(selections: number[][]) {
  const { singles, doubles, triples, mult } = stakeBreakdown(selections);
  const price = calcStakeRUB(selections);
  return `üí∞ <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${fmtMoney(price)} ‚ÇΩ</b>\n(–º–Ω–æ–∂–∏—Ç–µ–ª—å √ó${mult} ‚Ä¢ 1√ó${singles}, 2√ó${doubles}, 3√ó${triples})`;
}

// === Settlement (–æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥) ===
function isReadyForSettlement(draw: Draw): { ready: boolean; totalPlayed: number } {
  const evs = draw.events || [];
  if (!evs.length) return { ready: false, totalPlayed: 0 };
  let totalPlayed = 0;
  for (const e of evs) {
    if (e.isVoid) continue;
    if (e.result === null) return { ready: false, totalPlayed: 0 };
    totalPlayed++;
  }
  return { ready: totalPlayed > 0, totalPlayed };
}

function settleDraw(): Settlement {
  const { totalPlayed } = isReadyForSettlement(st.draw);
  const tickets = st.tickets.slice();

  const bank = tickets.reduce((sum, t) => sum + calcStakeRUB(t.selections), 0);

  let maxHits = 0;
  const scored = tickets.map(t => {
    const h = computeHits(t);
    if (h > maxHits) maxHits = h;
    return { t, hits: h };
  });

  const winnersRaw = scored.filter(x => x.hits === maxHits);
  const winnersCount = winnersRaw.length || 0;

  let prizePerWinner = 0;
  if (winnersCount > 0) {
    prizePerWinner = Math.floor(bank / winnersCount);
  }

  const winners = winnersRaw.map(x => ({
    ticketId: x.t.id,
    userId: x.t.userId,
    username: x.t.username,
    hits: x.hits,
    prizeRUB: prizePerWinner,
  }));

  const settlement: Settlement = {
    settledAt: new Date().toISOString(),
    totalPlayed,
    maxHits,
    bankRUB: bank,
    winners,
  };

  st.draw.settlement = settlement;
  st.draw.status = 'settled';
  return settlement;
}

function formatSettlementSummaryHTML(s: Settlement): string {
  const lines: string[] = [];
  lines.push(`üèÅ <b>–ò—Ç–æ–≥–∏ —Ç–∏—Ä–∞–∂–∞</b>`);
  lines.push(`–°—ã–≥—Ä–∞–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π: <b>${s.totalPlayed}</b>`);
  lines.push(`–ú–∞–∫—Å–∏–º—É–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: <b>${s.maxHits}</b>`);
  lines.push(`üí∞ –ë–∞–Ω–∫: <b>${fmtMoney(s.bankRUB)} ‚ÇΩ</b>`);
  lines.push(`–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: <b>${s.winners.length}</b>`);
  if (s.winners.length) {
    const sample = s.winners.slice(0, 10).map((w, i) => {
      const tag = w.username ? `@${esc(w.username)}` : `u:${w.userId}`;
      return `${i + 1}) ${tag} ‚Ä¢ #${esc(w.ticketId.slice(0, 8))}‚Ä¶ ‚Ä¢ ${w.hits} —Å–æ–≤–ø. ‚Ä¢ –ø—Ä–∏–∑ ${fmtMoney(w.prizeRUB)} ‚ÇΩ`;
    });
    lines.push('');
    lines.push(sample.join('\n'));
    if (s.winners.length > 10) lines.push(`‚Ä¶ –∏ –µ—â—ë ${s.winners.length - 10}`);
  }
  return lines.join('\n');
}

// –û–±—â–∏–π HTML-—Å–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–ª—è –ø—Ä–µ–≤—å—é/—Ä–∞—Å—Å—ã–ª–∫–∏/–∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–∫–∞)
function getResultsSummaryHTML(): string {
  const d = st.draw;
  const lines: string[] = [];

  lines.push(`üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–∏—Ä–∞–∂–∞ #${d.id}</b>`);
  lines.push('');

  (d.events || []).forEach((e, i) => {
    const n = String(i + 1).padStart(2, '0');
    const title = esc(e.title || `–°–æ–±—ã—Ç–∏–µ ${i + 1}`);
    let res = '‚Äî';
    if (e.isVoid) res = '–ê–ù–ù–£–õ–ò–†–û–í–ê–ù–û';
    else if (e.result !== null) res = OUT_TEXT[e.result];

    let src = '';
    if (e.sourceUrl) {
      try {
        const u = new URL(e.sourceUrl);
        src = `\n   –ò—Å—Ç–æ—á–Ω–∏–∫: <a href="${esc(u.toString())}">${esc(u.hostname)}</a>`;
      } catch {
        src = `\n   –ò—Å—Ç–æ—á–Ω–∏–∫: <a href="${esc(e.sourceUrl)}">${esc(e.sourceUrl)}</a>`;
      }
    }
    lines.push(`${n}. ${title} ‚Äî <b>${esc(res)}</b>${src}`);
  });

  const totalPlayed = playedEventsCount();
  const totalTickets = st.tickets.length;
  const uniqueUsers = new Set(st.tickets.map(t => t.userId)).size;
  const bank = st.tickets.reduce((sum, t) => sum + calcStakeRUB(t.selections), 0);

  lines.push('');
  lines.push(`–°—ã–≥—Ä–∞–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π: <b>${totalPlayed}/${st.draw.events.length}</b>`);
  lines.push(`üë• –ë–∏–ª–µ—Ç–æ–≤: <b>${totalTickets}</b> ‚Ä¢ üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>${uniqueUsers}</b> ‚Ä¢ üí∞ –ë–∞–Ω–∫ (—Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫): <b>${fmtMoney(bank)} ‚ÇΩ</b>`);

  if (d.settlement) {
    lines.push('');
    lines.push(formatSettlementSummaryHTML(d.settlement));
  }

  return lines.join('\n');
}

// –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ª—É—á—à–µ–º—É –±–∏–ª–µ—Ç—É (—á–µ—Ä–Ω–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥, –µ—Å–ª–∏ –Ω–µ—Ç settlement)
function getLeadersTable(limit = 10): { html: string; leaders: { userId: number; username?: string; hits: number }[] } {
  const bucket: Record<string, { userId: number; username?: string; hits: number }> = {};
  for (const t of st.tickets) {
    const key = String(t.userId);
    const h = computeHits(t);
    if (!bucket[key] || h > bucket[key].hits) {
      bucket[key] = { userId: t.userId, username: t.username, hits: h };
    }
  }
  const leaders = Object.values(bucket).sort((a, b) => b.hits - a.hits).slice(0, limit);

  const lines: string[] = [];
  if (!leaders.length) {
    lines.push('–ü–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤.');
  } else {
    lines.push('<b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>');
    leaders.forEach((u, idx) => {
      const tag = u.username ? `@${esc(u.username)}` : `u:${u.userId}`;
      const medal = idx === 0 ? 'ü•á' : idx === 1 ? 'ü•à' : idx === 2 ? 'ü•â' : 'üèÖ';
      lines.push(`${medal} ${tag} ‚Äî <b>${u.hits}</b> —Å–æ–≤–ø.`);
    });
  }
  return { html: lines.join('\n'), leaders };
}

function getIntroHtml(): string {
  return [
    `üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –¢—ã –≤ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–µ <b>15√ó3</b> ‚Äî –ª—ë–≥–∫–∞—è –∏–≥—Ä–∞ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∏—Å—Ö–æ–¥—ã.`,
    ``,
    `–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:`,
    `‚Ä¢ –ù–∞ –∫–∞–∂–¥—ã–π –∏–∑ <b>${EVENTS_COUNT}</b> –º–∞—Ç—á–µ–π –≤—ã–±–∏—Ä–∞–µ—à—å –∏—Å—Ö–æ–¥: <b>1</b> (–ø–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤), <b>X</b> (–Ω–∏—á—å—è) –∏–ª–∏ <b>2</b> (–ø–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π).`,
    `‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–æ–≤ –Ω–∞ –º–∞—Ç—á ‚Äî —Ç–∞–∫ —à–∞–Ω—Å –≤—ã—à–µ, –Ω–æ –±–∏–ª–µ—Ç ¬´—à–∏—Ä–µ¬ª.`,
    `‚Ä¢ –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤ ‚Äî –∂–º–∏ ¬´<b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</b>¬ª. –ë–∏–ª–µ—Ç –ø–æ–ø–∞–¥—ë—Ç –≤ –±–∞–∑—É —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏—Ä–∞–∂–∞.`,
    ``,
    `üí° –í–∞–∂–Ω–æ: <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∏—Å–ª–∞ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤</b>.`,
    `–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî <b>${STAKE_RUB} ‚ÇΩ</b>, –∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ = –±–∞–∑–∞ √ó –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1/2/3) –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º.`,
    ``,
    `–ß—Ç–æ –∑–¥–µ—Å—å —É–¥–æ–±–Ω–æ:`,
    `‚Ä¢ <b>üé≤ –ê–≤—Ç–æ–≤—ã–±–æ—Ä</b> ‚Äî –±–æ—Ç —Å–∞–º —Ä–∞—Å–∫–∏–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏—Å—Ö–æ–¥—ã –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º.`,
    `‚Ä¢ <b>üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä</b> ‚Äî –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º –≤—Å—ë —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.`,
    `‚Ä¢ <b>üìã –ú–æ–∏ –±–∏–ª–µ—Ç—ã</b> ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ TXT/CSV.`,
    `‚Ä¢ <b>üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b> ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–≤–æ–¥ –ø–æ —Ç–∏—Ä–∞–∂—É —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.`,
    `‚Ä¢ <b>üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é</b> ‚Äî –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ (—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Ç—á—ë—Ç—ã).`,
    ``,
    `–£–¥–∞—á–∏ –∏ –∞–∑–∞—Ä—Ç–∞! üíô`,
  ].join('\n');
}

// --------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---------------
function mainKb(): InlineKeyboardMarkup {
  return {
    inline_keyboard: [
      [Markup.button.callback('üé´ –°–æ–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç', 'make')],
      [Markup.button.callback('üìã –ú–æ–∏ –±–∏–ª–µ—Ç—ã', 'my')],
      [Markup.button.callback('üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'u:results')],
    ],
  };
}

function homeKbInline(): InlineKeyboardMarkup {
  return { inline_keyboard: [[Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')]] };
}

function confirmSaveKb(): InlineKeyboardMarkup {
  return {
    inline_keyboard: [
      [
        Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'save:ticket:confirm'),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'save:ticket:cancel'),
      ],
      [Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')],
    ],
  };
}

function makeTicketKb(s: Session, events: EventItem[]): InlineKeyboardMarkup {
  const rows: any[] = [];

  for (let i = 0; i < EVENTS_COUNT; i++) {
    const sel = s.selections[i] || [];
    const title = events[i]?.title || `–°–æ–±—ã—Ç–∏–µ ${i + 1}`;
    rows.push([
      Markup.button.callback(`${String(i + 1).padStart(2, '0')}. ${title}`.slice(0, 64), `noop:make:${i}`)
    ]);
    rows.push([
      Markup.button.callback(sel.includes(0) ? '‚úÖ 1' : '1', `sel:${i}:0`),
      Markup.button.callback(sel.includes(1) ? '‚úÖ X' : 'X', `sel:${i}:1`),
      Markup.button.callback(sel.includes(2) ? '‚úÖ 2' : '2', `sel:${i}:2`)
    ]);
  }

  rows.push([
    Markup.button.callback('üé≤ –ê–≤—Ç–æ–≤—ã–±–æ—Ä', 'auto:pick'),
    Markup.button.callback('üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä', 'clear:pick'),
    Markup.button.callback('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'save:ticket'),
  ]);
  rows.push([Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')]);

  rows.push([Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∏ –≤—ã–ø—É—Å—Ç–∏—Ç—å –±–∏–ª–µ—Ç', 'buy')]);
  return { inline_keyboard: rows };
}

// --------------- –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π ---------------
function pageForEventIdx(idx: number) {
  return Math.floor(idx / ADMIN_EDIT_PAGE_SIZE) + 1;
}

// --------------- –ó–∞–≥–ª—É—à–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è setup ---------------
const placeholderEvents = Array.from({ length: EVENTS_COUNT }, (_, i) => ({
  idx: i,
  title: `–ú–∞—Ç—á ${i + 1}: –ö–æ–º–∞–Ω–¥–∞A ‚Äî –ö–æ–º–∞–Ω–¥–∞B`,
  result: null,
  isVoid: false,
}));

// --------------- –ö–æ–º–∞–Ω–¥—ã /start /help /rules /events /my ---------------
bot.start(async (ctx) => {
  st = st || await loadStore();
  await ctx.reply(getIntroHtml(), { parse_mode: 'HTML', reply_markup: mainKb() });
});

// HELP –±–µ–∑ <hr>
bot.help(async (ctx) => {
  const helpText = `
<b>üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä!</b>

–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å—Ö–æ–¥–æ–≤ –º–∞—Ç—á–µ–π ‚öΩÔ∏èüèíüèÄ  
–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –±–æ—Ç —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤–∞—à –±–∏–ª–µ—Ç –∏ –∂–¥—ë—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∏—Ä–∞–∂–∞.  
–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –±–æ—Ç –ø–æ–¥–≤–µ–¥—ë—Ç –∏—Ç–æ–≥–∏ –∏ –ø–æ–∫–∞–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π üí™

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

<b>üìò –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <i>¬´–°–æ–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç¬ª</i><br>
2Ô∏è‚É£ –í –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:<br>
&nbsp;&nbsp;&nbsp;üÖ∞ –ü–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã<br>
&nbsp;&nbsp;&nbsp;ü§ù –ù–∏—á—å—è<br>
&nbsp;&nbsp;&nbsp;üÖ± –ü–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã<br>
3Ô∏è‚É£ –ù–µ —Ö–æ—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é? –ñ–º–∏—Ç–µ üé≤ <i>¬´–ê–≤—Ç–æ–≤—ã–±–æ—Ä¬ª</i> ‚Äî –±–æ—Ç —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç –∏—Å—Ö–æ–¥—ã —Å–∞–º.<br>
4Ô∏è‚É£ –ú–æ–∂–Ω–æ —Å—Ç–µ—Ä–µ—Ç—å –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–æ–π üßπ <i>¬´–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä¬ª</i>.<br>
5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <i>¬´üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª</i> ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

<b>üí∞ –°—Ç–∞–≤–∫–∞:</b><br>
‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî <b>${STAKE_RUB} ‚ÇΩ</b>.<br>
‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å = –±–∞–∑–∞ √ó –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤ (1/2/3) –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º.<br>
‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–º–µ—á–∞–µ—Ç–µ, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å—ã ‚Äî –∏ —Ç–µ–º –¥–æ—Ä–æ–∂–µ –±–∏–ª–µ—Ç.

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

<b>üìã –ß—Ç–æ –µ—â—ë —É–º–µ–µ—Ç –±–æ—Ç:</b><br>
üéü <i>¬´–ú–æ–∏ –±–∏–ª–µ—Ç—ã¬ª</i> ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–∏–ª–µ—Ç–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–º TXT/CSV.<br>
üèÜ <i>¬´–†–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª</i> ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–≤–æ–¥ –ø–æ —Ç–∏—Ä–∞–∂—É —Å –∏—Å—Ö–æ–¥–∞–º–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏.<br>

<b>üéâ –£–¥–∞—á–∏ –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∞–∑–∞—Ä—Ç–∞!</b>
  `;
  await ctx.reply(helpText, { parse_mode: 'HTML', reply_markup: homeKbInline() });
});

// RULES
bot.command('rules', async (ctx) => {

// --- /wallet: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–ª–∞—Ç ---
bot.command('wallet', async (ctx) => {
  st = st || await loadStore();
  const uid = ctx.from?.id!;
  const parts = (ctx.message as any).text.split(/\s+/);
  if (parts.length < 2) {
    await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å: /wallet EQC...–≤–∞—à_–∞–¥—Ä–µ—Å', { reply_markup: homeKbInline() });
    return;
  }
  const addr = parts[1].trim();
  st.users[uid] = st.users[uid] || { hasTicketForCurrent: false };
  st.users[uid].wallet = addr;
  st.users[uid].username = st.users[uid].username || ctx.from?.username || '';
  await saveStore(st);
  await ctx.reply(`–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${addr}`, { reply_markup: homeKbInline() });
});
  const text = `
<b>üìú –ü—Ä–∞–≤–∏–ª–∞</b>

‚Ä¢ –¢–∏—Ä–∞–∂ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ ${EVENTS_COUNT} —Å–æ–±—ã—Ç–∏–π.<br>
‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–æ–≤: <b>1</b> / <b>X</b> / <b>2</b>.<br>
‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ = <b>${STAKE_RUB} ‚ÇΩ √ó –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤</b> –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º.<br>
‚Ä¢ –ö–æ–≥–¥–∞ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è, –±–æ—Ç –ø–æ–¥–≤–µ–¥—ë—Ç –∏—Ç–æ–≥–∏ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º (void –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è).<br>
‚Ä¢ –ò—Ç–æ–≥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∞–¥–º–∏–Ω–æ–º).
  `;
  await ctx.reply(text, { parse_mode: 'HTML', reply_markup: homeKbInline() });
});

// –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (–ø—É–±–ª–∏—á–Ω—ã–π)
bot.command('events', async (ctx) => {
  st = st || await loadStore();

  if (!st.draw || !st.draw.events?.length) {
    await ctx.reply('–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤ /admin.', { reply_markup: homeKbInline() });
    return;
  }

  const lines = st.draw.events.map((e, i) => {
    const mark = e.isVoid ? '‚ùå' : (e.result === null ? '‚ö™Ô∏è' : '‚úÖ');
    const res = e.result === null ? '' : ` ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>${OUT_TEXT[e.result]}</b>`;
    let src = '';
    if (e.sourceUrl) {
      try {
        const u = new URL(e.sourceUrl);
        src = `\n   –ò—Å—Ç–æ—á–Ω–∏–∫: <a href="${esc(u.toString())}">${esc(u.hostname)}</a>`;
      } catch {
        src = `\n   –ò—Å—Ç–æ—á–Ω–∏–∫: <a href="${esc(e.sourceUrl)}">${esc(e.sourceUrl)}</a>`;
      }
    }
    return `${mark} ${String(i + 1).padStart(2, '0')}. ${esc(e.title)}${res}${src}`;
  });

  await ctx.reply(
    [
      `üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Ç–∏—Ä–∞–∂–∞ #${st.draw.id}</b>`,
      `–°—Ç–∞—Ç—É—Å: ${st.draw.status}`,
      '',
      lines.join('\n\n'),
    ].join('\n'),
    { parse_mode: 'HTML', reply_markup: homeKbInline() }
  );
});

// –ú–æ–∏ –±–∏–ª–µ—Ç—ã (–∫–æ–º–∞–Ω–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞)
bot.command('my', async (ctx) => {
  await showMyTicketsPage(ctx, 1);
});
bot.action('my', async (ctx) => {
  await ctx.answerCbQuery('');
  await showMyTicketsPage(ctx, 1);
});

// –ò–≥—Ä–æ–∫: –∫–Ω–æ–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
bot.action('u:results', async (ctx) => {
  st = st || await loadStore();
  const totalPlayed = playedEventsCount();
  if (totalPlayed === 0) {
    await ctx.answerCbQuery('');
    await ctx.reply('–ò—Ç–æ–≥–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –µ—â—ë –Ω–µ—Ç —Å—ã–≥—Ä–∞–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.', { reply_markup: homeKbInline() });
    return;
  }
  const summary = getResultsSummaryHTML();
  await ctx.answerCbQuery('');
  await ctx.reply(summary, { parse_mode: 'HTML', reply_markup: homeKbInline() });
});

// –î–æ–º–æ–π
async function goHome(ctx: Context) {
  const intro = getIntroHtml();
  try {
    // @ts-ignore
    if (ctx.callbackQuery) {
      await (ctx as any).editMessageText(intro, { parse_mode: 'HTML', reply_markup: mainKb() });
      return;
    }
  } catch {}
  await (ctx as any).reply(intro, { parse_mode: 'HTML', reply_markup: mainKb() });
}
bot.action('home', async (ctx) => {
  await ctx.answerCbQuery('');
  await goHome(ctx);
});

// --------------- –ê–¥–º–∏–Ω–∫–∞ ---------------
function isAdmin(ctx: Context) {
  const uid = ctx.from?.id;
  return !!uid && ADMIN_IDS.includes(uid);
}

bot.command('admin', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  adminState.set(ctx.from!.id, { mode: 'IDLE' });
  await ctx.reply(
    `–ê–¥–º–∏–Ω-–º–µ–Ω—é. –¢–∏—Ä–∞–∂ #${st.draw.id}, —Å—Ç–∞—Ç—É—Å: ${st.draw.status}. –°–æ–±—ã—Ç–∏–π: ${st.draw.events.length}/${EVENTS_COUNT}`,
    { reply_markup: adminKb(st.draw) }
  );
});

type AdminMode = 'IDLE' | 'RENAME' | 'RENAME_ONE' | 'SET_SRC';
const adminState = new Map<number, { mode: AdminMode; evIdx?: number }>();

function adminKb(draw: Draw): InlineKeyboardMarkup {
  const rows = [
    [Markup.button.callback('üõ† –†–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π', 'a:manage')],
    [Markup.button.callback('üìã –°–æ–±—ã—Ç–∏—è', 'a:events')],
    [
      Markup.button.callback('üü¢ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º', 'a:open'),
      Markup.button.callback('üî¥ –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º', 'a:close'),
    ],
    [Markup.button.callback('üìä –ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏', 'a:settle')],
    [Markup.button.callback('üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤', 'a:list')],
    [Markup.button.callback('üéü –ë–∏–ª–µ—Ç—ã (–∞–¥–º–∏–Ω)', 'a:tickets')],
    [Markup.button.callback('üëÄ –ü—Ä–µ–≤—å—é –∏—Ç–æ–≥–æ–≤', 'a:preview')],
    [Markup.button.callback('üì£ –†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'a:broadcast')],
    [Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')],
  ];
  return { inline_keyboard: rows };
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
function manageKb(draw: Draw, page = 1): InlineKeyboardMarkup {
  const rows: any[] = [];

  const total = draw.events.length;
  const pages = Math.max(1, Math.ceil(total / ADMIN_EDIT_PAGE_SIZE));
  const safePage = Math.min(Math.max(1, page), pages);
  const start = (safePage - 1) * ADMIN_EDIT_PAGE_SIZE;
  const end = Math.min(start + ADMIN_EDIT_PAGE_SIZE, total);

  for (let i = start; i < end; i++) {
    const e = draw.events[i];
    const num = String(e.idx + 1).padStart(2, '0');
    const res = e.isVoid ? '‚ùå' : (e.result === null ? '‚Äî' : OUT_TEXT[e.result]);
    rows.push([
      Markup.button.callback(`‚úèÔ∏è ${num}`, `ev:rn:${e.idx}`),
      Markup.button.callback(`üîó ${num}`, `ev:src:${e.idx}`),
      Markup.button.callback(`üóë ${num}`, `ev:del:${e.idx}`),
      Markup.button.callback(`${num} ${res}`.slice(0, 12), `noop:ev:${e.idx}`),
      Markup.button.callback(`${e.title.substring(0, 24)}`, `noop:ev:${e.idx}`),
    ]);
    rows.push([
      Markup.button.callback('1', `ev:set:${e.idx}:0`),
      Markup.button.callback('X', `ev:set:${e.idx}:1`),
      Markup.button.callback('2', `ev:set:${e.idx}:2`),
      Markup.button.callback('‚ùå Void', `ev:void:${e.idx}`),
      Markup.button.callback('‚ôªÔ∏è –°–±—Ä–æ—Å', `ev:clear:${e.idx}`),
    ]);
  }

  rows.push([Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ', 'a:add')]);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const pagesCount = Math.max(1, Math.ceil(total / ADMIN_EDIT_PAGE_SIZE));
  const nav: any[] = [];
  if (safePage > 1) nav.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥.', `a:pg:${safePage - 1}`));
  if (safePage < pagesCount) nav.push(Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥.', `a:pg:${safePage + 1}`));
  if (nav.length) rows.push(nav);

  rows.push([Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º', 'admin:close'), Markup.button.callback('üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–Ω–∫', 'admin:settle'), Markup.button.callback('üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏–∑—ã', 'admin:pay')]);
  rows.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'a:back')]);
  rows.push([Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')]);

  return { inline_keyboard: rows };
}

bot.action('a:manage', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  await ctx.editMessageText(
    `–†–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π. –°–µ–π—á–∞—Å: ${st.draw.events.length}/${EVENTS_COUNT}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`,
    { reply_markup: manageKb(st.draw, 1) }
  );
});

// –ü–µ—Ä–µ—Ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
bot.action(/^a:pg:(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  const page = Number(ctx.match[1]);
  st = st || await loadStore();
  await ctx.answerCbQuery('');
  try {
    await ctx.editMessageReplyMarkup(manageKb(st.draw, page));
  } catch {
    await ctx.editMessageText(
      `–†–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π. –°–µ–π—á–∞—Å: ${st.draw.events.length}/${EVENTS_COUNT}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`,
      { reply_markup: manageKb(st.draw, page) }
    );
  }
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π (–∞–¥–º–∏–Ω)

// --- –ê–¥–º–∏–Ω: –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º ---
bot.action('admin:close', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  st.draw.status = 'closed';
  await saveStore(st);
  await ctx.answerCbQuery('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç');
  await ctx.editMessageReplyMarkup({ inline_keyboard: manageKb(st.draw, 1).inline_keyboard });
});

// --- –ê–¥–º–∏–Ω: —Ä–∞—Å—á—ë—Ç –±–∞–Ω–∫–∞ –∏ –ø—Ä–∏–∑–æ–≤ ---
bot.action('admin:settle', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const hitsByUser = st.tickets.map(t => ({ userId: t.userId, wallet: st.users[t.userId]?.wallet || '', hits: computeHits(t) }));
  const maxHits = hitsByUser.reduce((m, x) => Math.max(m, x.hits), 0);
  const totalBank = +(st.draw.settlement?.bankUSDT || 0);
  const name = (PAYOUT_FORMULA as FormulaName);
  const params = name === 'MAX_HITS_EQUAL_SHARE' ? PAYOUT_PARAMS_MAX_HITS_EQUAL_SHARE : name === 'TIERED_WEIGHTS' ? PAYOUT_PARAMS_TIERED_WEIGHTS : PAYOUT_PARAMS_FIXED_TABLE;
  const result = calculatePayouts(name, { drawId: String(st.draw.id), totalBank, maxHitsInDraw: maxHits, hitsByUser }, params);
  st.draw.settlement = st.draw.settlement || { settledAt: '', totalPlayed: 0, maxHits: 0, bankRUB: 0, winners: [] };
  st.draw.settlement.maxHits = maxHits;
  st.draw.settlement.formulaName = result.formulaName;
  st.draw.settlement.formulaParams = result.formulaParams;
  st.draw.settlement.formulaVersion = result.formulaVersion;
  st.draw.settlement.bankUSDT = totalBank;
  st.draw.settlement.winners = result.payouts.map(p => ({ ticketId: '‚Äî', userId: p.userId, username: st.users[p.userId]?.username, hits: p.hits, prizeUSDT: p.amount, prizeRUB: 0 }));
  await saveStore(st);
  await ctx.answerCbQuery('–ë–∞–Ω–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω');
});

// --- –ê–¥–º–∏–Ω: –º–∞—Å—Å–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã ---
bot.action('admin:pay', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const s = st.draw.settlement;
  if (!s || !s.winners?.length) { await ctx.answerCbQuery('–ù–µ—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π'); return; }
  let ok = 0, fail = 0;
  for (const w of s.winners) {
    const amount = +(w.prizeUSDT || 0);
    if (amount <= 0) continue;
    const wallet = st.users[w.userId]?.wallet;
    if (!wallet) { fail++; continue; }
    try {
      const res = await sendJetton({ toAddress: wallet, amountTokens: amount, comment: `Prize #${st.draw.id}`, forwardTon: 0.05 });
      if ((res as any).ok) ok++; else fail++;
    } catch { fail++; }
  }
  await ctx.answerCbQuery(`–í—ã–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –£—Å–ø–µ—Ö–æ–≤: ${ok}, –æ—à–∏–±–æ–∫: ${fail}`);
});
bot.action('a:events', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();

  const lines = (st.draw.events || []).map((e, i) => {
    const num = String(i + 1).padStart(2, '0');
    const title = esc(e.title || `–°–æ–±—ã—Ç–∏–µ ${i + 1}`);
    const res = e.isVoid ? '<i>–ê–ù–ù–£–õ–ò–†–û–í–ê–ù–û</i>' : (e.result === null ? '‚Äî' : `<b>${OUT_TEXT[e.result]}</b>`);
    const src = e.sourceUrl
      ? (() => {
          try {
            const u = new URL(e.sourceUrl);
            return `\n   –ò—Å—Ç–æ—á–Ω–∏–∫: <a href="${esc(u.toString())}">${esc(u.hostname)}</a>`;
          } catch {
            return `\n   –ò—Å—Ç–æ—á–Ω–∏–∫: <a href="${esc(e.sourceUrl)}">${esc(e.sourceUrl)}</a>`;
          }
        })()
      : '';
    return `${num}. ${title} ‚Äî ${res}${src}`;
  });

  const text = [
    `üìã <b>–°–æ–±—ã—Ç–∏—è —Ç–∏—Ä–∞–∂–∞ #${st.draw.id}</b>`,
    `–°—Ç–∞—Ç—É—Å: <b>${st.draw.status}</b>`,
    '',
    lines.length ? lines.join('\n\n') : '–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ¬ª.',
  ].join('\n');

  await ctx.answerCbQuery('');
  try {
    await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: adminKb(st.draw) });
  } catch {
    await ctx.reply(text, { parse_mode: 'HTML', reply_markup: adminKb(st.draw) });
  }
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
bot.action('a:back', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  await ctx.answerCbQuery('');
  const text = `–ê–¥–º–∏–Ω-–º–µ–Ω—é. –¢–∏—Ä–∞–∂ #${st.draw.id}, —Å—Ç–∞—Ç—É—Å: ${st.draw.status}. –°–æ–±—ã—Ç–∏–π: ${st.draw.events.length}/${EVENTS_COUNT}`;
  try {
    await ctx.editMessageText(text, { reply_markup: adminKb(st.draw) });
  } catch {
    await ctx.reply(text, { reply_markup: adminKb(st.draw) });
  }
});

bot.action(/^noop:(make|ev):\d+$/, async (ctx) => {
  await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: 1/X/2, Void, ‚ôªÔ∏è –∏–ª–∏ ‚úèÔ∏è/üîó/üóë');
});

// –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è)
bot.action('a:add', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const newIdx = st.draw.events.length;
  if (newIdx >= EVENTS_COUNT) {
    await ctx.answerCbQuery('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–±—ã—Ç–∏–π');
    return;
  }
  st.draw.events.push({ idx: newIdx, title: `–ú–∞—Ç—á ${newIdx + 1}: –ö–æ–º–∞–Ω–¥–∞A ‚Äî –ö–æ–º–∞–Ω–¥–∞B`, result: null, isVoid: false });
  await saveStore(st);
  await ctx.answerCbQuery('–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
  const page = pageForEventIdx(newIdx);
  try {
    await ctx.editMessageText(
      `–†–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π. –°–µ–π—á–∞—Å: ${st.draw.events.length}/${EVENTS_COUNT}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`,
      { reply_markup: manageKb(st.draw, page) }
    );
  } catch {
    await ctx.reply(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ #${newIdx + 1}.`, { reply_markup: manageKb(st.draw, page) });
  }
});

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ ‚Äî –∫–Ω–æ–ø–∫–∞
bot.action(/^ev:rn:(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  const idx = Number(ctx.match[1]);
  st = st || await loadStore();
  if (!st.draw.events[idx]) {
    await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    return;
  }
  adminState.set(ctx.from!.id, { mode: 'RENAME_ONE', evIdx: idx });
  await ctx.answerCbQuery('');
  await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è #${idx + 1} (—Ç–µ–∫—É—â–µ–µ: "${st.draw.events[idx].title}")`, { reply_markup: homeKbInline() });
});

// –ò—Å—Ç–æ—á–Ω–∏–∫ ‚Äî –∫–Ω–æ–ø–∫–∞
bot.action(/^ev:src:(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  const idx = Number(ctx.match[1]);
  st = st || await loadStore();
  if (!st.draw.events[idx]) {
    await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    return;
  }
  adminState.set(ctx.from!.id, { mode: 'SET_SRC', evIdx: idx });
  const cur = st.draw.events[idx].sourceUrl;
  await ctx.answerCbQuery('');
  await ctx.reply(
    [
      `–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è #${idx + 1}.`,
      cur ? `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${cur}` : '–°–µ–π—á–∞—Å –Ω–µ –∑–∞–¥–∞–Ω–æ.',
      '',
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É.'
    ].join('\n'),
    { reply_markup: homeKbInline() }
  );
});

// –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≥–¥–µ –æ–Ω–æ –±—ã–ª–æ)
bot.action(/^ev:del:(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  const idx = Number(ctx.match[1]);
  st = st || await loadStore();
  if (!st.draw.events[idx]) {
    await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    return;
  }
  const removed = st.draw.events.splice(idx, 1)[0];
  st.draw.events = st.draw.events.map((e, i) => ({ ...e, idx: i }));
  await saveStore(st);
  await ctx.answerCbQuery(`–£–¥–∞–ª–µ–Ω–æ: ${removed.title}`);
  const page = pageForEventIdx(Math.max(0, Math.min(idx, st.draw.events.length - 1)));
  try {
    await ctx.editMessageText(
      `–†–µ–¥–∞–∫—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π. –°–µ–π—á–∞—Å: ${st.draw.events.length}/${EVENTS_COUNT}. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`,
      { reply_markup: manageKb(st.draw, page) }
    );
  } catch {
    await ctx.reply(`–£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ #${idx + 1}. –°–µ–π—á–∞—Å: ${st.draw.events.length}/${EVENTS_COUNT}.`, { reply_markup: manageKb(st.draw, page) });
  }
});

// === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1/X/2), Void –∏ –°–±—Ä–æ—Å ‚Äî —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –Ω–∞ ¬´—Ç—É¬ª —Å—Ç—Ä–∞–Ω–∏—Ü—É ===
bot.action(/^ev:set:(\d+):(0|1|2)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  const idx = Number(ctx.match[1]);
  const r = Number(ctx.match[2]) as 0|1|2;
  st = st || await loadStore();
  const ev = st.draw.events[idx];
  if (!ev) { await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'); return; }
  ev.isVoid = false;
  ev.result = r;
  await saveStore(st);
  await ctx.answerCbQuery(`–†–µ–∑—É–ª—å—Ç–∞—Ç #${idx + 1}: ${OUT_TEXT[r]}`);
  const page = pageForEventIdx(idx);
  try {
    await ctx.editMessageReplyMarkup(manageKb(st.draw, page));
  } catch {
    await ctx.reply('–û–±–Ω–æ–≤–ª–µ–Ω–æ', { reply_markup: manageKb(st.draw, page) });
  }
});

bot.action(/^ev:void:(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  const idx = Number(ctx.match[1]);
  st = st || await loadStore();
  const ev = st.draw.events[idx];
  if (!ev) { await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'); return; }
  ev.isVoid = true;
  ev.result = null;
  await saveStore(st);
  await ctx.answerCbQuery(`–°–æ–±—ã—Ç–∏–µ #${idx + 1} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ`);
  const page = pageForEventIdx(idx);
  try {
    await ctx.editMessageReplyMarkup(manageKb(st.draw, page));
  } catch {
    await ctx.reply('–û–±–Ω–æ–≤–ª–µ–Ω–æ', { reply_markup: manageKb(st.draw, page) });
  }
});

bot.action(/^ev:clear:(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  const idx = Number(ctx.match[1]);
  st = st || await loadStore();
  const ev = st.draw.events[idx];
  if (!ev) { await ctx.answerCbQuery('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'); return; }
  ev.isVoid = false;
  ev.result = null;
  await saveStore(st);
  await ctx.answerCbQuery(`–†–µ–∑—É–ª—å—Ç–∞—Ç #${idx + 1} –æ—á–∏—â–µ–Ω`);
  const page = pageForEventIdx(idx);
  try {
    await ctx.editMessageReplyMarkup(manageKb(st.draw, page));
  } catch {
    await ctx.reply('–û–±–Ω–æ–≤–ª–µ–Ω–æ', { reply_markup: manageKb(st.draw, page) });
  }
});

// –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º
bot.action('a:open', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  st.draw.status = 'open';
  if (st.draw.events.length === 0) {
    st.draw.events = placeholderEvents.map(e => ({ ...e }));
  }
  await saveStore(st);
  await ctx.answerCbQuery('–ü—Ä–∏—ë–º –æ—Ç–∫—Ä—ã—Ç');
  await ctx.reply(`–ü—Ä–∏—ë–º –æ—Ç–∫—Ä—ã—Ç. –°–æ–±—ã—Ç–∏–π: ${st.draw.events.length}/${EVENTS_COUNT}.`, { reply_markup: homeKbInline() });
});

bot.action('a:close', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  st.draw.status = 'closed';
  await saveStore(st);
  await ctx.answerCbQuery('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç');
  await ctx.reply('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç.', { reply_markup: homeKbInline() });
});

// === –ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ (–æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥) ===
bot.action('a:settle', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();

  const { ready } = isReadyForSettlement(st.draw);
  if (!ready) {
    await ctx.answerCbQuery('–ï—â—ë –Ω–µ –≥–æ—Ç–æ–≤—ã –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏—Å–∫–ª—é—á–∞—è void).');
    return;
  }
  const settlement = settleDraw();
  await saveStore(st);

  const text = [
    `‚úÖ –¢–∏—Ä–∞–∂ #${st.draw.id} –ø–æ–¥–≤–µ–¥—ë–Ω.`,
    '',
    formatSettlementSummaryHTML(settlement),
  ].join('\n');

  await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
  try {
    await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: adminKb(st.draw) });
  } catch {
    await ctx.reply(text, { parse_mode: 'HTML', reply_markup: adminKb(st.draw) });
  }
});

// –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç)
bot.action('a:list', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const lines = st.tickets.map(t => {
    const selPretty = t.selections
      .map((arr, i) => {
        const human = arr.map(v => OUTCOMES[v]).join('/');
        return `${String(i + 1).padStart(2, '0')}:${human || '-'}`;
      })
      .join(' | ');
    const price = calcStakeRUB(t.selections);
    return `#${t.id} | u:${t.userId} | ${selPretty} | üí∏ ${fmtMoney(price)} ‚ÇΩ`;
  });
  await ctx.answerCbQuery('');
  await ctx.reply(lines.slice(-50).join('\n') || '–ü—É—Å—Ç–æ', { reply_markup: homeKbInline() });
});

// –ü—Ä–µ–≤—å—é –∏—Ç–æ–≥–æ–≤
bot.action('a:preview', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();

  const summary = getResultsSummaryHTML();
  const add = !st.draw.settlement ? `\n\n<i>–°–æ–≤–µ—Ç:</i> –ø—Ä–æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏–ª–∏ Void) –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìä –ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏¬ª.` : '';
  const text = summary + add;

  await ctx.answerCbQuery('');
  try {
    await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: adminKb(st.draw) });
  } catch {
    await ctx.reply(text, { parse_mode: 'HTML', reply_markup: adminKb(st.draw) });
  }
});

// –†–∞—Å—Å—ã–ª–∫–∞ –∏—Ç–æ–≥–æ–≤
bot.action('a:broadcast', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();

  const totalPlayed = playedEventsCount();
  if (totalPlayed === 0) {
    await ctx.answerCbQuery('–ù–µ—Ç —Å—ã–≥—Ä–∞–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π ‚Äî —Ä–∞—Å—Å—ã–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ');
    return;
  }

  const uniqUsers = Array.from(new Set(st.tickets.map(t => t.userId)));
  const summary = getResultsSummaryHTML();

  let ok = 0, fail = 0;

  if (st.draw.settlement) {
    const s = st.draw.settlement;
    const winnersByUser = new Map<number, { totalPrize: number; maxHits: number }>();
    for (const w of s.winners) {
      const prev = winnersByUser.get(w.userId) || { totalPrize: 0, maxHits: 0 };
      winnersByUser.set(w.userId, { totalPrize: prev.totalPrize + w.prizeRUB, maxHits: Math.max(prev.maxHits, w.hits) });
    }

    for (const uid of uniqUsers) {
      try {
        const rec = winnersByUser.get(uid);
        const hdr = rec
          ? `üéâ –í—ã –≤ —á–∏—Å–ª–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ç–∏—Ä–∞–∂–∞ #${st.draw.id}! –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: <b>${rec.maxHits}</b>. –í–∞—à –ø—Ä–∏–∑: <b>${fmtMoney(rec.totalPrize)} ‚ÇΩ</b>.`
          : `üëã –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–∏—Ä–∞–∂—É #${st.draw.id}.`;
        const text = [hdr, '', summary].join('\n');
        await ctx.telegram.sendMessage(uid, text, { parse_mode: 'HTML' });
        ok++;
      } catch {
        fail++;
      }
    }
  } else {
    // —á–µ—Ä–Ω–æ–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–±–µ–∑ –ø—Ä–∏–∑–æ–≤)
    for (const uid of uniqUsers) {
      try {
        const userTickets = st.tickets.filter(t => t.userId === uid);
        if (!userTickets.length) continue;

        const best = userTickets
          .map(t => ({ t, hits: computeHits(t) }))
          .sort((a, b) => b.hits - a.hits)[0];

        const userBlock = [
          `üëã –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–∏—Ä–∞–∂—É #${st.draw.id}`,
          `–°–æ–≤–ø–∞–¥–µ–Ω–∏–π: <b>${best.hits}</b> –∏–∑ <b>${totalPlayed}</b>`,
          ``,
          summary
        ].join('\n');

        await ctx.telegram.sendMessage(uid, userBlock, { parse_mode: 'HTML' });
        ok++;
      } catch {
        fail++;
      }
    }
  }

  const report = [
    `üì£ –†–∞–∑–æ—Å–ª–∞–Ω–æ –∏—Ç–æ–≥–æ–≤: <b>${ok}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`,
    fail ? `–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${fail}` : '',
  ].filter(Boolean).join('\n');

  await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
  try {
    await ctx.editMessageText(report, { parse_mode: 'HTML', reply_markup: adminKb(st.draw) });
  } catch {
    await ctx.reply(report, { parse_mode: 'HTML', reply_markup: adminKb(st.draw) });
  }
});

// --------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–º (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ / –∏—Å—Ç–æ—á–Ω–∏–∫) ---------------
bot.on('text', async (ctx) => {
  const uid = ctx.from?.id;
  if (!uid) return;

  const state = adminState.get(uid);
  if (!state || state.mode === 'IDLE') return;
  if (!isAdmin(ctx)) return;

  const text = (ctx.message as any)?.text || '';

  if (state.mode === 'RENAME') {
    const m = text.match(/^\s*(\d+)\.\s*(.+?)\s*$/);
    if (!m) {
      await ctx.reply('–§–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä. –Ω–æ–≤–æ–µ –∏–º—è\n–ü—Ä–∏–º–µ—Ä: 2. –ú–∏–ª–∞–Ω ‚Äî –ò–Ω—Ç–µ—Ä', { reply_markup: homeKbInline() });
      return;
    }
    const idx = Number(m[1]) - 1;
    const name = m[2];
    st = st || await loadStore();
    const ev = st.draw.events[idx];
    if (!ev) {
      await ctx.reply('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', { reply_markup: homeKbInline() });
      return;
    }
    ev.title = name;
    await saveStore(st);
    adminState.set(uid, { mode: 'IDLE' });
    await ctx.reply(`–û–∫. –°–æ–±—ã—Ç–∏–µ #${idx + 1} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤: ${name}`, { reply_markup: manageKb(st.draw, pageForEventIdx(idx)) });
  }

  if (state.mode === 'RENAME_ONE') {
    const idx = state.evIdx!;
    const name = text.trim();
    if (!name) {
      await ctx.reply('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', { reply_markup: homeKbInline() });
      return;
    }
    st = st || await loadStore();
    const ev = st.draw.events[idx];
    if (!ev) {
      await ctx.reply('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', { reply_markup: homeKbInline() });
      adminState.set(uid, { mode: 'IDLE' });
      return;
    }
    ev.title = name;
    await saveStore(st);
    adminState.set(uid, { mode: 'IDLE' });
    await ctx.reply(`–û–∫. –°–æ–±—ã—Ç–∏–µ #${idx + 1} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤: ${name}`, { reply_markup: manageKb(st.draw, pageForEventIdx(idx)) });
  }

  if (state.mode === 'SET_SRC') {
    const idx = state.evIdx!;
    let url = text.trim();

    st = st || await loadStore();
    const ev = st.draw.events[idx];
    if (!ev) {
      await ctx.reply('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è', { reply_markup: homeKbInline() });
      adminState.set(uid, { mode: 'IDLE' });
      return;
    }

    if (url === '-' || url === '‚Äî') {
      delete ev.sourceUrl;
      await saveStore(st);
      adminState.set(uid, { mode: 'IDLE' });
      await ctx.reply(`–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è #${idx + 1} –æ—á–∏—â–µ–Ω.`, { reply_markup: manageKb(st.draw, pageForEventIdx(idx)) });
      return;
    }

    try {
      if (!/^https?:\/\//i.test(url)) url = 'https://' + url;
      const u = new URL(url);
      ev.sourceUrl = u.toString();
    } catch {
      await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (http/https) –∏–ª–∏ ¬´-¬ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.', { reply_markup: homeKbInline() });
      return;
    }

    await saveStore(st);
    adminState.set(uid, { mode: 'IDLE' });
    await ctx.reply(`–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è #${idx + 1} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${ev.sourceUrl}`, { reply_markup: manageKb(st.draw, pageForEventIdx(idx)) });
  }
});

// --------------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏: —Å–±–æ—Ä –±–∏–ª–µ—Ç–∞ ---------------
bot.action('make', async (ctx) => {
  st = st || await loadStore();
  if (st.draw.status === 'setup') {
    st.draw.events = placeholderEvents.map(e => ({ ...e }));
    st.draw.status = 'open';
    await saveStore(st);
  }
  if (st.draw.status !== 'open') {
    await ctx.answerCbQuery('');
    await ctx.reply('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.', { reply_markup: homeKbInline() });
    return;
  }
  const sess = { selections: Array.from({ length: EVENTS_COUNT }, () => []) };
  sessions.set(ctx.from!.id, sess);

  const text = [
    `–û—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ö–æ–¥—ã (1/X/2) –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.`,
    '',
    formatStakeLine(sess.selections),
  ].join('\n');

  await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: makeTicketKb(sess, st.draw.events) });
});

// üé≤ –ê–≤—Ç–æ–≤—ã–±–æ—Ä
bot.action('auto:pick', async (ctx) => {
  st = st || await loadStore();
  if (st.draw.status !== 'open') {
    await ctx.answerCbQuery('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç');
    return;
  }
  let sess = sessions.get(ctx.from!.id);
  if (!sess) {
    sess = { selections: Array.from({ length: EVENTS_COUNT }, () => []) };
    sessions.set(ctx.from!.id, sess);
  }
  for (let i = 0; i < EVENTS_COUNT; i++) {
    const r = Math.floor(Math.random() * 3); // 0,1,2
    sess.selections[i] = [r];
  }
  await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ! –°–ª—É—á–∞–π–Ω—ã–µ –∏—Å—Ö–æ–¥—ã —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã üëå');

  const text = [
    `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–ø—Ä–∞–≤—å—Ç–µ ‚Äî –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.`,
    '',
    formatStakeLine(sess.selections),
  ].join('\n');

  await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: makeTicketKb(sess, st.draw.events) });
});

// üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
bot.action('clear:pick', async (ctx) => {
  st = st || await loadStore();
  if (st.draw.status !== 'open') {
    await ctx.answerCbQuery('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç');
    return;
  }
  let sess = sessions.get(ctx.from!.id);
  if (!sess) {
    sess = { selections: Array.from({ length: EVENTS_COUNT }, () => []) };
    sessions.set(ctx.from!.id, sess);
  } else {
    for (let i = 0; i < EVENTS_COUNT; i++) sess.selections[i] = [];
  }
  await ctx.answerCbQuery('–í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω üßº');

  const text = [
    `–û—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ö–æ–¥—ã (1/X/2) –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.`,
    '',
    formatStakeLine(sess.selections),
  ].join('\n');

  await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: makeTicketKb(sess, st.draw.events) });
});

// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–æ–≤ —Å –∂–∏–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ===
bot.action(/^sel:(\d+):([012])$/, async (ctx) => {
  st = st || await loadStore();
  if (st.draw.status !== 'open') {
    await ctx.answerCbQuery('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç');
    return;
  }
  const i = Number(ctx.match[1]);
  const v = Number(ctx.match[2]) as 0 | 1 | 2;

  let sess = sessions.get(ctx.from!.id);
  if (!sess) {
    sess = { selections: Array.from({ length: EVENTS_COUNT }, () => []) };
    sessions.set(ctx.from!.id, sess);
  }
  const arr = sess.selections[i] || [];

  const idx = arr.indexOf(v);
  if (idx >= 0) {
    // —Å–Ω—è—Ç—å –≤—ã–±–æ—Ä
    arr.splice(idx, 1);
  } else {
    // –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä
    if (arr.length < 3) arr.push(v);
  }
  // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  sess.selections[i] = Array.from(new Set(arr)).sort();

  await ctx.answerCbQuery('');

  const text = [
    `–û—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ö–æ–¥—ã (1/X/2) –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.`,
    '',
    formatStakeLine(sess.selections),
  ].join('\n');

  await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: makeTicketKb(sess, st.draw.events) });
});

// --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ---
bot.action('save:ticket', async (ctx) => {
  st = st || await loadStore();
  if (st.draw.status !== 'open') {
    await ctx.answerCbQuery('–ü—Ä–∏—ë–º –∑–∞–∫—Ä—ã—Ç');
    return;
  }
  const sess = sessions.get(ctx.from!.id) || { selections: Array.from({ length: EVENTS_COUNT }, () => []) };

  const price = calcStakeRUB(sess.selections);
  const { singles, doubles, triples, mult } = stakeBreakdown(sess.selections);

  const text = [
    `–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!`,
    ``,
    `üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${fmtMoney(price)} ‚ÇΩ</b>`,
    `(–±–∞–∑–∞ ${STAKE_RUB} ‚ÇΩ √ó –º–Ω–æ–∂–∏—Ç–µ–ª—å √ó${mult} ‚Ä¢ 1√ó${singles}, 2√ó${doubles}, 3√ó${triples})`,
    ``,
    `–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç.`,
  ].join('\n');

  await ctx.answerCbQuery('');
  try {
    await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: confirmSaveKb() });
  } catch {
    await ctx.reply(text, { parse_mode: 'HTML', reply_markup: confirmSaveKb() });
  }
});

bot.action('save:ticket:cancel', async (ctx) => {
  await ctx.answerCbQuery('–û–∫, –º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä.');
  const sess = sessions.get(ctx.from!.id) || { selections: Array.from({ length: EVENTS_COUNT }, () => []) };

  const text = [
    `–û—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ö–æ–¥—ã (1/X/2) –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.`,
    '',
    formatStakeLine(sess.selections),
  ].join('\n');

  await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: makeTicketKb(sess, st.draw.events) });
});

// –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
bot.action('save:ticket:confirm', async (ctx) => {
  try {
    if (!st) st = await loadStore();
    const uid = ctx.from?.id!;
    if (st.draw.status !== 'open') {
      await ctx.answerCbQuery(`–ü—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫ –∑–∞–∫—Ä—ã—Ç (—Å—Ç–∞—Ç—É—Å: ${st.draw.status})`);
      return;
    }
    if (st.draw.events.length !== EVENTS_COUNT) {
      await ctx.answerCbQuery(`–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (${st.draw.events.length}/${EVENTS_COUNT})`);
      return;
    }
    const s = sessions.get(uid);
    if (!s) {
      await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –∏—Å—Ö–æ–¥—ã');
      return;
    }

    const ticketId = `${uid}-${Date.now()}`;
    const ticket: Ticket = {
      id: ticketId,
      userId: uid,
      username: ctx.from?.username,
      selections: s.selections.map(a => [...a]),
      createdAt: new Date().toISOString(),
    };

    if (!st.users) st.users = {};
    st.tickets.push(ticket);
    st.users[uid.toString()] = { hasTicketForCurrent: true };
    await saveStore(st);

    const human = ticket.selections
      .map((arr, i) => {
        const ev = st.draw?.events?.[i];
        const title = ev?.title ? ev.title : `–°–æ–±—ã—Ç–∏–µ ${i + 1}`;
        const items = arr.length ? arr.map(v => OUT_TEXT[v]).join(' / ') : '‚Äî';
        return `${String(i + 1).padStart(2, '0')}  ${title}: ${items}`;
      })
      .join('\n');

    const price = calcStakeRUB(ticket.selections);
    const { singles, doubles, triples, mult } = stakeBreakdown(ticket.selections);

    await ctx.answerCbQuery('–ë–∏–ª–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
    await ctx.reply(
      [
        `<b>–ë–∏–ª–µ—Ç #${esc(ticket.id)}</b>`,
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${esc(ticket.username || String(uid))}`,
        '',
        `<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥—ã:</b>`,
        `<pre>‚Ññ   –ú–∞—Ç—á: –ò—Å—Ö–æ–¥(—ã)\n${esc(human)}</pre>`,
        '',
        `üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${fmtMoney(price)} ‚ÇΩ</b>`,
        `(–±–∞–∑–∞ ${STAKE_RUB} ‚ÇΩ √ó –º–Ω–æ–∂–∏—Ç–µ–ª—å √ó${mult} ‚Ä¢ 1√ó${singles}, 2√ó${doubles}, 3√ó${triples})`,
        `üéØ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–∏—Ä–∞–∂–µ #${st.draw.id}`,
      ].join('\n'),
      { parse_mode: 'HTML', reply_markup: homeKbInline() }
    );
  } catch (e) {
    console.error(`Error in save:ticket:confirm for user ${ctx.from?.id}:`, e);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞');
  }
});

// --------------- –ú–æ–∏ –±–∏–ª–µ—Ç—ã: —Å–ø–∏—Å–æ–∫/–∫–∞—Ä—Ç–æ—á–∫–∞/—ç–∫—Å–ø–æ—Ä—Ç ---------------
function getUserTicketsSorted(uid: number): Ticket[] {
  const all = st.tickets.filter(t => t.userId === uid);
  return all.sort((a, b) => {
    const ta = a.createdAt || '';
    const tb = b.createdAt || '';
    if (ta === tb) return b.id.localeCompare(a.id);
    return tb.localeCompare(ta);
  });
}

function pageCount(total: number, size: number) {
  return Math.max(1, Math.ceil(total / size));
}

function formatTicketRowBrief(t: Ticket, indexInPage: number) {
  const filled = t.selections.reduce((acc, a) => acc + (a && a.length ? 1 : 0), 0);
  const dt = new Date(t.createdAt);
  const hh = String(dt.getHours()).padStart(2, '0');
  const mm = String(dt.getMinutes()).padStart(2, '0');
  const dd = String(dt.getDate()).padStart(2, '0');
  const mo = String(dt.getMonth() + 1).padStart(2, '0');
  const price = fmtMoney(calcStakeRUB(t.selections));
  return `${indexInPage}) #${t.id.slice(0, 8)}‚Ä¶ ‚Ä¢ ${dd}.${mo} ${hh}:${mm} ‚Ä¢ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ${filled}/${EVENTS_COUNT} ‚Ä¢ üí∏ ${price} ‚ÇΩ`;
}

function formatMyListPageText(tickets: Ticket[], page: number) {
  const total = tickets.length;
  const totalPages = pageCount(total, PAGE_SIZE);
  const start = (page - 1) * PAGE_SIZE;
  const slice = tickets.slice(start, start + PAGE_SIZE);

  const lines = slice.map((t, i) => formatTicketRowBrief(t, i + 1));
  return [
    `üìã –ú–æ–∏ –±–∏–ª–µ—Ç—ã (—Å—Ç—Ä. ${page}/${totalPages}, –≤—Å–µ–≥–æ: ${total})`,
    '',
    lines.join('\n') || '–ü—É—Å—Ç–æ',
  ].join('\n');
}

async function showMyTicketsPage(ctx: Context, page: number) {
  st = st || await loadStore();
  const uid = ctx.from!.id;
  const tickets = getUserTicketsSorted(uid);
  const totalPages = pageCount(tickets.length, PAGE_SIZE);
  const safePage = Math.min(Math.max(1, page), totalPages);

  const text = formatMyListPageText(tickets, safePage);
  const kb = myListKeyboard(tickets, safePage, totalPages);

  try {
    // @ts-ignore
    if (ctx.callbackQuery) {
      await (ctx as any).editMessageText(text, { reply_markup: kb });
      return;
    }
  } catch {}
  await (ctx as any).reply(text, { reply_markup: kb });
}

function myListKeyboard(tickets: Ticket[], page: number, totalPages: number): InlineKeyboardMarkup {
  const rows: any[] = [];
  const start = (page - 1) * PAGE_SIZE;
  const slice = tickets.slice(start, start + PAGE_SIZE);

  slice.forEach((t) => {
    rows.push([Markup.button.callback(`üîç –û—Ç–∫—Ä—ã—Ç—å`, `t:open:${t.id}:${page}`)]);
  });

  const navRow: any[] = [];
  if (page > 1) navRow.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥.', `t:page:${page - 1}`));
  if (page < totalPages) navRow.push(Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥.', `t:page:${page + 1}`));
  if (navRow.length) rows.push(navRow);

  rows.push([
    Markup.button.callback('‚¨áÔ∏è TXT', 't:exp:txt'),
    Markup.button.callback('‚¨áÔ∏è CSV', 't:exp:csv'),
  ]);

  rows.push([Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')]);

  return { inline_keyboard: rows };
}

function detailKb(tickets: Ticket[], currentId: string, pageFrom: number): InlineKeyboardMarkup {
  const rows: any[] = [];
  const idx = tickets.findIndex(x => x.id === currentId);
  const prev = idx > 0 ? tickets[idx - 1] : null;
  const next = idx >= 0 && idx < tickets.length - 1 ? tickets[idx + 1] : null;

  const navRow: any[] = [];
  if (prev) navRow.push(Markup.button.callback('‚èÆÔ∏è –ü—Ä–µ–¥. –±–∏–ª–µ—Ç', `t:nav:prev:${currentId}:${pageFrom}`));
  if (next) navRow.push(Markup.button.callback('‚è≠Ô∏è –°–ª–µ–¥. –±–∏–ª–µ—Ç', `t:nav:next:${currentId}:${pageFrom}`));
  if (navRow.length) rows.push(navRow);

  rows.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', `t:back:${pageFrom}`)]);
  rows.push([Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')]);
  return { inline_keyboard: rows };
}

function formatTicketDetail(t: Ticket) {
  const dt = new Date(t.createdAt);
  const hh = String(dt.getHours()).padStart(2, '0');
  const mm = String(dt.getMinutes()).padStart(2, '0');
  const dd = String(dt.getDate()).padStart(2, '0');
  const mo = String(dt.getMonth() + 1).padStart(2, '0');

  const header = `üé´ –ë–∏–ª–µ—Ç #${esc(t.id)} ‚Ä¢ @${esc(t.username || String(t.userId))} ‚Ä¢ ${dd}.${mo} ${hh}:${mm}`;
  const lines = t.selections.map((arr, i) => {
    const ev = st.draw?.events?.[i];
    const title = ev?.title ? ev.title : `–°–æ–±—ã—Ç–∏–µ ${i + 1}`;
    const items = (arr && arr.length) ? arr.map(v => OUT_TEXT[v]).join(' / ') : '‚Äî';
    return `${String(i + 1).padStart(2, '0')}  ${esc(title)}: ${esc(items)}`;
  });

  const price = fmtMoney(calcStakeRUB(t.selections));

  return `${esc(header)}\n<pre>‚Ññ   –ú–∞—Ç—á: –ò—Å—Ö–æ–¥(—ã)\n${lines.join('\n')}</pre>\nüí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${price} ‚ÇΩ</b>\nüéØ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–∏—Ä–∞–∂–µ #${st.draw.id}`;
}

bot.action(/^t:open:(.+?):(\d+)$/, async (ctx) => {
  st = st || await loadStore();
  const uid = ctx.from!.id;
  const ticketId = ctx.match[1];
  const page = Number(ctx.match[2]);

  const tickets = getUserTicketsSorted(uid);
  const ticket = tickets.find(t => t.id === ticketId);
  if (!ticket) {
    await ctx.answerCbQuery('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const text = formatTicketDetail(ticket);
  const kb = detailKb(tickets, ticket.id, page);

  await ctx.editMessageText(text, { reply_markup: kb, parse_mode: 'HTML' });
});

bot.action(/^t:nav:(prev|next):(.+?):(\d+)$/, async (ctx) => {
  st = st || await loadStore();
  const uid = ctx.from!.id;
  const dir = ctx.match[1];
  const currentId = ctx.match[2];
  const page = Number(ctx.match[3]);

  const tickets = getUserTicketsSorted(uid);
  const idx = tickets.findIndex(t => t.id === currentId);
  if (idx < 0) {
    await ctx.answerCbQuery('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  const newIdx = dir === 'prev' ? Math.max(0, idx - 1) : Math.min(tickets.length - 1, idx + 1);
  const ticket = tickets[newIdx];

  const text = formatTicketDetail(ticket);
  const kb = detailKb(tickets, ticket.id, page);
  await ctx.editMessageText(text, { reply_markup: kb, parse_mode: 'HTML' });
});

bot.action(/^t:back:(\d+)$/, async (ctx) => {
  const page = Number(ctx.match[1]);
  await showMyTicketsPage(ctx, page);
});

// –≠–∫—Å–ø–æ—Ä—Ç TXT/CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action('t:exp:txt', async (ctx) => {
  st = st || await loadStore();
  const uid = ctx.from!.id;
  const tickets = getUserTicketsSorted(uid);

  if (!tickets.length) {
    await ctx.answerCbQuery('');
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', { reply_markup: homeKbInline() });
    return;
  }

  const blocks = tickets.map(t => {
    const head = `#${t.id} ‚Ä¢ @${t.username || t.userId} ‚Ä¢ ${new Date(t.createdAt).toISOString()}`;
    const body = t.selections
      .map((arr, i) => `${String(i + 1).padStart(2, '0')}  ${(arr && arr.length) ? arr.map(v => OUTCOMES[v]).join('/') : '-'}`)
      .join('\n');
    const price = fmtMoney(calcStakeRUB(t.selections));
    return `${head}\n${body}\nüí∏ ${price} ‚ÇΩ`;
  });

  const content = blocks.join('\n\n');
  const buf = Buffer.from(content, 'utf8');

  await ctx.answerCbQuery('');
  await (ctx as any).replyWithDocument({ source: buf, filename: `tickets_${uid}.txt` });
});

bot.action('t:exp:csv', async (ctx) => {
  st = st || await loadStore();
  const uid = ctx.from!.id;
  const tickets = getUserTicketsSorted(uid);

  if (!tickets.length) {
    await ctx.answerCbQuery('');
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', { reply_markup: homeKbInline() });
    return;
  }

  const header = ['ticket_id', 'user_id', 'created_at', ...Array.from({ length: EVENTS_COUNT }, (_, i) => `e${String(i + 1).padStart(2, '0')}`), 'stake_rub'];
  const rows = tickets.map(t => {
    const cols = Array.from({ length: EVENTS_COUNT }, (_, i) => {
      const arr = t.selections[i] || [];
      return arr.length ? arr.map(v => OUTCOMES[v]).join('/') : '-';
    });
    const price = String(calcStakeRUB(t.selections));
    return [t.id, String(t.userId), new Date(t.createdAt).toISOString(), ...cols, price];
  });

  const escapeCsv = (s: string) => /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
  const csv = [header.map(escapeCsv).join(','), ...rows.map(r => r.map(escapeCsv).join(','))].join('\n');
  const buf = Buffer.from(csv, 'utf8');

  await ctx.answerCbQuery('');
  await (ctx as any).replyWithDocument({ source: buf, filename: `tickets_${uid}.csv` });
});

// --------------- –ê–¥–º–∏–Ω: –±–∏–ª–µ—Ç—ã (–ø–∞–≥–∏–Ω–∞—Ü–∏—è/–ø—Ä–æ—Å–º–æ—Ç—Ä/—ç–∫—Å–ø–æ—Ä—Ç) ---------------
function getAllTicketsSorted(): Ticket[] {
  const all = st.tickets.slice();
  return all.sort((a, b) => {
    const ta = a.createdAt || '';
    const tb = b.createdAt || '';
    if (ta === tb) return b.id.localeCompare(a.id);
    return tb.localeCompare(ta);
  });
}

function formatAdminRow(t: Ticket, n: number) {
  const dt = new Date(t.createdAt);
  const hh = String(dt.getHours()).padStart(2, '0');
  const mm = String(dt.getMinutes()).padStart(2, '0');
  const dd = String(dt.getDate()).padStart(2, '0');
  const mo = String(dt.getMonth() + 1).padStart(2, '0');
  const filled = t.selections.reduce((acc, a) => acc + (a && a.length ? 1 : 0), 0);
  const price = fmtMoney(calcStakeRUB(t.selections));
  return `${n}) #${t.id.slice(0,8)}‚Ä¶ ‚Ä¢ u:${t.userId} ‚Ä¢ ${dd}.${mo} ${hh}:${mm} ‚Ä¢ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ${filled}/${EVENTS_COUNT} ‚Ä¢ üí∏ ${price} ‚ÇΩ`;
}

function adminTicketsPageText(tickets: Ticket[], page: number) {
  const total = tickets.length;
  const totalPages = Math.max(1, Math.ceil(total / ADMIN_PAGE_SIZE));
  const start = (page - 1) * ADMIN_PAGE_SIZE;
  const slice = tickets.slice(start, start + ADMIN_PAGE_SIZE);
  const lines = slice.map((t, i) => formatAdminRow(t, i + 1));

  const uniqueUsers = new Set(tickets.map(t => t.userId)).size;
  const bank = tickets.reduce((sum, t) => sum + calcStakeRUB(t.selections), 0);

  return [
    `üéü –ë–∏–ª–µ—Ç—ã (–∞–¥–º–∏–Ω) ‚Äî —Å—Ç—Ä. ${page}/${totalPages}, –≤—Å–µ–≥–æ: ${total}`,
    `üë• –ë–∏–ª–µ—Ç–æ–≤: ${total} ‚Ä¢ üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${uniqueUsers} ‚Ä¢ üí∞ –ë–∞–Ω–∫: ${fmtMoney(bank)} ‚ÇΩ`,
    '',
    lines.join('\n') || '–ü—É—Å—Ç–æ',
  ].join('\n');
}

function adminTicketsKb(tickets: Ticket[], page: number): InlineKeyboardMarkup {
  const rows: any[] = [];
  const total = tickets.length;
  const totalPages = Math.max(1, Math.ceil(total / ADMIN_PAGE_SIZE));
  const start = (page - 1) * ADMIN_PAGE_SIZE;
  const slice = tickets.slice(start, start + ADMIN_PAGE_SIZE);

  slice.forEach((t) => {
    rows.push([Markup.button.callback('üîç –û—Ç–∫—Ä—ã—Ç—å', `at:open:${t.id}:${page}`)]);
  });

  const nav: any[] = [];
  if (page > 1) nav.push(Markup.button.callback('‚¨ÖÔ∏è –ü—Ä–µ–¥.', `at:page:${page - 1}`));
  if (page < totalPages) nav.push(Markup.button.callback('‚û°Ô∏è –°–ª–µ–¥.', `at:page:${page + 1}`));
  if (nav.length) rows.push(nav);

  rows.push([
    Markup.button.callback('‚¨áÔ∏è TXT', 'at:exp:txt'),
    Markup.button.callback('‚¨áÔ∏è CSV', 'at:exp:csv'),
    Markup.button.callback('‚¨áÔ∏è JSON', 'at:exp:json'),
  ]);

  rows.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'a:back')]);
  rows.push([Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')]);
  return { inline_keyboard: rows };
}

bot.action('a:tickets', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const tickets = getAllTicketsSorted();
  const page = 1;
  const text = adminTicketsPageText(tickets, page);
  const kb = adminTicketsKb(tickets, page);
  await ctx.answerCbQuery('');
  await ctx.editMessageText(text, { reply_markup: kb });
});

bot.action(/^at:page:(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const page = Number(ctx.match[1]);
  const tickets = getAllTicketsSorted();
  const text = adminTicketsPageText(tickets, page);
  const kb = adminTicketsKb(tickets, page);
  await ctx.answerCbQuery('');
  await ctx.editMessageText(text, { reply_markup: kb });
});

function formatTicketDetailAdmin(t: Ticket) {
  const dt = new Date(t.createdAt);
  const hh = String(dt.getHours()).padStart(2, '0');
  const mm = String(dt.getMinutes()).padStart(2, '0');
  const dd = String(dt.getDate()).padStart(2, '0');
  const mo = String(dt.getMonth() + 1).padStart(2, '0');

  const header = `üé´ –ë–∏–ª–µ—Ç #${esc(t.id)} ‚Ä¢ @${esc(t.username || String(t.userId))} ‚Ä¢ ${dd}.${mo} ${hh}:${mm}`;
  const lines = t.selections.map((arr, i) => {
    const OUT = OUT_TEXT;
    const items = (arr && arr.length) ? arr.map(v => OUT[v]).join(' / ') : '‚Äî';
    const ev = st.draw?.events?.[i];
    const title = ev?.title || `–°–æ–±—ã—Ç–∏–µ ${i + 1}`;
    return `${String(i + 1).padStart(2, '0')}  ${esc(title)}: ${esc(items)}`;
  });

  const price = fmtMoney(calcStakeRUB(t.selections));

  return `${esc(header)}\n<pre>‚Ññ   –ú–∞—Ç—á: –ò—Å—Ö–æ–¥(—ã)\n${lines.join('\n')}</pre>\nüí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${price} ‚ÇΩ</b>\nüéØ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–∏—Ä–∞–∂–µ #${st.draw.id}`;
}

bot.action(/^at:open:(.+?):(\d+)$/, async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const ticketId = ctx.match[1];
  const page = Number(ctx.match[2]);
  const tickets = getAllTicketsSorted();
  const t = tickets.find(x => x.id === ticketId);
  if (!t) {
    await ctx.answerCbQuery('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  const text = formatTicketDetailAdmin(t);

  const rows: any[] = [];
  const idx = tickets.findIndex(x => x.id === ticketId);
  const prev = idx > 0 ? tickets[idx - 1] : null;
  const next = idx >= 0 && idx < tickets.length - 1 ? tickets[idx + 1] : null;
  const nav: any[] = [];
  if (prev) nav.push(Markup.button.callback('‚èÆÔ∏è –ü—Ä–µ–¥. –±–∏–ª–µ—Ç', `at:open:${prev.id}:${page}`));
  if (next) nav.push(Markup.button.callback('‚è≠Ô∏è –°–ª–µ–¥. –±–∏–ª–µ—Ç', `at:open:${next.id}:${page}`));
  if (nav.length) rows.push(nav);
  rows.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `at:page:${page}`)]);
  rows.push([Markup.button.callback('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'home')]);
  const kb: InlineKeyboardMarkup = { inline_keyboard: rows };

  await ctx.answerCbQuery('');
  await ctx.editMessageText(text, { parse_mode: 'HTML', reply_markup: kb });
});

// –≠–∫—Å–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
bot.action('at:exp:txt', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const tickets = getAllTicketsSorted();

  if (!tickets.length) {
    await ctx.answerCbQuery('');
    await ctx.reply('–ù–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', { reply_markup: adminKb(st.draw) });
    return;
  }

  const blocks = tickets.map(t => {
    const head = `#${t.id} ‚Ä¢ u:${t.userId} ‚Ä¢ ${new Date(t.createdAt).toISOString()}`;
    const body = t.selections.map((arr, i) => {
      const OUT = OUTCOMES;
      const items = (arr && arr.length) ? arr.map(v => OUT[v]).join('/') : '-';
      return `${String(i + 1).padStart(2, '0')}  ${items}`;
    }).join('\n');
    const price = fmtMoney(calcStakeRUB(t.selections));
    return `${head}\n${body}\nüí∏ ${price} ‚ÇΩ`;
  });
  const content = blocks.join('\n\n');
  const buf = Buffer.from(content, 'utf8');

  await ctx.answerCbQuery('–≠–∫—Å–ø–æ—Ä—Ç TXT —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω');
  await (ctx as any).replyWithDocument({ source: buf, filename: `tickets_all.txt` });
});

bot.action('at:exp:csv', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const tickets = getAllTicketsSorted();

  if (!tickets.length) {
    await ctx.answerCbQuery('');
    await ctx.reply('–ù–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', { reply_markup: adminKb(st.draw) });
    return;
  }

  const header = ['ticket_id', 'user_id', 'created_at', ...Array.from({ length: EVENTS_COUNT }, (_, i) => `e${String(i + 1).padStart(2, '0')}`), 'stake_rub'];
  const rows = tickets.map(t => {
    const cols = Array.from({ length: EVENTS_COUNT }, (_, i) => {
      const arr = t.selections[i] || [];
      const OUT = OUTCOMES;
      return arr.length ? arr.map(v => OUT[v]).join('/') : '-';
    });
    const price = String(calcStakeRUB(t.selections));
    return [t.id, String(t.userId), new Date(t.createdAt).toISOString(), ...cols, price];
  });

  const escCsv = (s: string) => /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
  const csv = [header.map(escCsv).join(','), ...rows.map(r => r.map(escCsv).join(','))].join('\n');
  const buf = Buffer.from(csv, 'utf8');

  await ctx.answerCbQuery('–≠–∫—Å–ø–æ—Ä—Ç CSV —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω');
  await (ctx as any).replyWithDocument({ source: buf, filename: `tickets_all.csv` });
});

bot.action('at:exp:json', async (ctx) => {
  if (!isAdmin(ctx)) return;
  st = st || await loadStore();
  const tickets = getAllTicketsSorted();

  if (!tickets.length) {
    await ctx.answerCbQuery('');
    await ctx.reply('–ù–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', { reply_markup: adminKb(st.draw) });
    return;
  }

  const payload = JSON.stringify(tickets, null, 2);
  const buf = Buffer.from(payload, 'utf8');

  await ctx.answerCbQuery('–≠–∫—Å–ø–æ—Ä—Ç JSON —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω');
  await (ctx as any).replyWithDocument({ source: buf, filename: `tickets_all.json` });
});

// --------------- –ó–∞–ø—É—Å–∫ ---------------
(async () => {
  try {
    st = await loadStore();

    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ POLLING —Ä–µ–∂–∏–º–µ (NO PAYMENTS)...');

        // Init TON provider for non-custodial payments
    await initTon();

await bot.telegram.setMyCommands([
      { command: 'help',   description: '–ü–æ–º–æ—â—å' },
      { command: 'rules',  description: '–ü—Ä–∞–≤–∏–ª–∞' },
      { command: 'events', description: '–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π' },
      { command: 'my',     description: '–ú–æ–∏ –±–∏–ª–µ—Ç—ã' },
      // /admin –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º –¥–ª—è –≤—Å–µ—Ö; –∞–¥–º–∏–Ω—ã –∑–Ω–∞—é—Ç –∫–æ–º–∞–Ω–¥—É
    ]);

    await bot.launch();
    console.log(
      `‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Draw #${st.draw.id} status=${st.draw.status}, EVENTS_COUNT=${EVENTS_COUNT}, STAKE_RUB(base)=${STAKE_RUB}`
    );
  } catch (error) {
    console.error(`Failed to start bot: ${error}`);
    process.exit(1);
  }
})();

process.once('SIGINT', async () => {
  console.log('SIGINT received, shutting down gracefully');
  try { await bot.stop('SIGINT'); } catch {}
  process.exit(0);
});

process.once('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down gracefully');
  try { await bot.stop('SIGTERM'); } catch {}
  process.exit(0);
});
